legend_text_size = 13
p = ggplot(sampled)+
geom_line(aes(x = proposed_log, y = pMN_0, color = '\u03b8=0'), size = 0.2)+
geom_line(aes(x = proposed_log, y = pMN_1, color = '\u03b8=0.100'), size = 0.2)+
geom_line(aes(x = proposed_log, y = pMN_2, color = '\u03b8=0.010'), size = 0.2)+
geom_line(aes(x = proposed_log, y = pMN_3, color = '\u03b8=0.001'), size = 0.2)+
geom_point(aes(x = proposed_log, y = pMN_0, color = '\u03b8=0'), size = 0.5)+
geom_point(aes(x = proposed_log, y = pMN_1, color = '\u03b8=0.100'), size = 0.5)+
geom_point(aes(x = proposed_log, y = pMN_2, color = '\u03b8=0.010'), size = 0.5)+
geom_point(aes(x = proposed_log, y = pMN_3, color = '\u03b8=0.001'), size = 0.5)+
scale_color_manual(name = "\u03b8 values", values = c('\u03b8=0' = "red", '\u03b8=0.100' = "blue",
'\u03b8=0.010' = "orange", '\u03b8=0.001' = "forestgreen"))+
labs( x= 'log10(N)', y = 'P(M=1|N)')+
theme(axis.title = element_text(size = axis_title_size),
axis.text = element_text(size = axis_text_size),
legend.title = element_text(size = legend_title_size),
legend.text = element_text(size = legend_text_size),
legend.position = c(0.8,0.3))
p
p
library(ggplot2)
### support function to calculate <x>_n-1 / n!, use exp(log sum) to get accurate result
factorial_ratio <- function(x, n){
log_ratio = -log(x+n) - log(x+n-1) - lbeta(x, n+1)
return(exp(log_ratio))
}
### function to calculate probability P(M | N = n)
log_pM_gN <- function(n, theta, RATIO = factorial_ratio){
if(n == 1){
return(-Inf) ### not possible as we assume no division no mutation
} else{
ratio = RATIO(2*(1-theta), n)
return(log(1 - ratio))
}
}
### P(N) for power law
log_pN <- function(n, rho){
return(log(rho) + lbeta(n, rho + 1))
}
### P(M)
pM_approx <- function(nu=1e7, theta, rho){
pm = 1 ### first term, sum of [P(N) * 1], then minus the sum of 2nd term
### Exact calculation for k in 1:nu.
exact_terms = unlist(lapply(1:nu, function(k){
pn = rho * beta(k, rho+1)
pmgn_res = 1 / (  (k+1-2*theta)*(k+2-2*theta)*beta(2-2*theta, k+1) )
return(pn * pmgn_res)
}))
pm = pm - sum(exact_terms)
### Approximate calculation for k in (nu+1):infty
constant_term = rho * gamma(rho+1) / gamma(2-2*theta) ## constant
zeta_sum = VGAM::zeta(x = 1+rho+2*theta, shift = nu+1)
pm = pm - constant_term * zeta_sum
return(pm)
}
### P(N|M)
pN_gM <- function(n, rho, theta){
if(n == 1){
return(-Inf) ### not possible as we assume no division no mutation
} else{
lpn = log_pN(n, rho) ## P(N)
lpmgn = log_pM_gN(n, theta)
return(exp(lpn+lpmgn))
}
}
nrange = 1e7
plot_range = 1e5
rho = 0.1
theta = 1e-5
nu = 1e7
axis_title_size = 16
axis_text_size = 15
legend_title_size = 13
legend_text_size = 13
### Pure birth model
sampled = data.frame(proposed = 2:nrange)
### more plots
nrange = 1e7
plot_range = 1e5
intersect = data.frame(rho = rep(c(0.1,0.15,0.2), 3), theta = c(rep(1e-4, 3), rep(1e-5, 3), rep(1e-6, 3)))
## p1: rho = 0.1, mutate = 1e-4
rho = 0.1
theta = 1e-4
sampled = data.frame(proposed = 2:nrange)
sampled$pn = unlist(lapply(sampled$proposed, FUN = function(k){
return(exp(log_pN(k, rho)))
}))
sampled$pngm = unlist(lapply(sampled$proposed, FUN = function(k){
return(pN_gM(k, rho, theta))
}))
pm = pM_approx(nu = nu, theta = theta, rho = rho)
sampled$pngm = sampled$pngm / pm
sampled$diff = abs(log(sampled$pngm) - log(sampled$pn))
intersect$close[1] = sampled$proposed[which(sampled$diff == min(sampled$diff))]
p1 = ggplot(sampled[1:plot_range, ])+
geom_point(aes(x = log10(proposed), y = log10(pn), color = 'N'), size = 0.4)+
geom_line(aes(x = log10(proposed), y = log10(pn), color = 'N'), linetype = 2, size=0.2)+
geom_point(aes(x = log10(proposed), y = log10(pngm), color = 'N|M=1'), size = 0.4)+
geom_line(aes(x = log10(proposed), y = log10(pngm), color = 'N|M=1'), linetype = 2, size=0.2)+
scale_color_manual(name = "Prob. mass", values = c("N" = "darkblue", "N|M=1" = "red"))+
labs( x= 'log10(N)', y = 'log10(Prob. mass)', title = '\u03c1=0.1; \u03b8=0.0001')+
theme(axis.title = element_text(size = axis_title_size),
axis.text = element_text(size = axis_text_size),
legend.title = element_text(size = legend_title_size),
legend.text = element_text(size = legend_text_size),
legend.position = c(0.8,0.8))
p1
## p2: rho = 0.15, mutate = 1e-4
rho = 0.15
theta = 1e-4
sampled$pn = unlist(lapply(sampled$proposed, FUN = function(k){
return(exp(log_pN(k, rho)))
}))
sampled$pngm = unlist(lapply(sampled$proposed, FUN = function(k){
return(pN_gM(k, rho, theta))
}))
pm = pM_approx(nu = nu, theta = theta, rho = rho)
sampled$pngm = sampled$pngm / pm
sampled$diff = abs(log(sampled$pngm) - log(sampled$pn))
intersect$close[2] = sampled$proposed[which(sampled$diff == min(sampled$diff))]
### more plots
nrange = 1e7
plot_range = 1e5
intersect = data.frame(rho = rep(c(0.1,0.15,0.2), 3), theta = c(rep(1e-4, 3), rep(1e-5, 3), rep(1e-6, 3)))
## p1: rho = 0.1, mutate = 1e-4
rho = 0.1
theta = 1e-4
sampled = data.frame(proposed = 2:nrange)
sampled$pn = unlist(lapply(sampled$proposed, FUN = function(k){
return(exp(log_pN(k, rho)))
}))
sampled$pngm = unlist(lapply(sampled$proposed, FUN = function(k){
return(pN_gM(k, rho, theta))
}))
pm = pM_approx(nu = nu, theta = theta, rho = rho)
sampled$pngm = sampled$pngm / pm
sampled$diff = abs(log(sampled$pngm) - log(sampled$pn))
intersect$close[1] = sampled$proposed[which(sampled$diff == min(sampled$diff))]
p1 = ggplot(sampled[1:plot_range, ])+
geom_point(aes(x = log10(proposed), y = log10(pn), color = 'N'), size = 0.4)+
geom_line(aes(x = log10(proposed), y = log10(pn), color = 'N'), linetype = 2, size=0.2)+
geom_point(aes(x = log10(proposed), y = log10(pngm), color = 'N|M=1'), size = 0.4)+
geom_line(aes(x = log10(proposed), y = log10(pngm), color = 'N|M=1'), linetype = 2, size=0.2)+
scale_color_manual(name = "Prob. mass", values = c("N" = "darkblue", "N|M=1" = "red"))+
labs( x= 'log10(N)', y = 'log10(Prob. mass)', title = '\u03c1=0.1; \u03b8=1e-4')+
theme(axis.title = element_text(size = axis_title_size),
axis.text = element_text(size = axis_text_size),
legend.title = element_text(size = legend_title_size),
legend.text = element_text(size = legend_text_size),
legend.position = c(0.8,0.8))
p1
## p2: rho = 0.15, mutate = 1e-4
rho = 0.15
theta = 1e-4
sampled$pn = unlist(lapply(sampled$proposed, FUN = function(k){
return(exp(log_pN(k, rho)))
}))
sampled$pngm = unlist(lapply(sampled$proposed, FUN = function(k){
return(pN_gM(k, rho, theta))
}))
pm = pM_approx(nu = nu, theta = theta, rho = rho)
sampled$pngm = sampled$pngm / pm
sampled$diff = abs(log(sampled$pngm) - log(sampled$pn))
intersect$close[2] = sampled$proposed[which(sampled$diff == min(sampled$diff))]
p2 = ggplot(sampled[1:plot_range, ])+
geom_point(aes(x = log10(proposed), y = log10(pn), color = 'N'), size = 0.4)+
geom_line(aes(x = log10(proposed), y = log10(pn), color = 'N'), linetype = 2, size=0.2)+
geom_point(aes(x = log10(proposed), y = log10(pngm), color = 'N|M=1'), size = 0.4)+
geom_line(aes(x = log10(proposed), y = log10(pngm), color = 'N|M=1'), linetype = 2, size=0.2)+
scale_color_manual(name = "Prob. mass", values = c("N" = "darkblue", "N|M=1" = "red"))+
labs( x= 'log10(N)', y = 'log10(Prob. mass)', title = '\u03c1=0.15; \u03b8=1e-4')+
theme(axis.title = element_text(size = axis_title_size),
axis.text = element_text(size = axis_text_size),
legend.title = element_text(size = legend_title_size),
legend.text = element_text(size = legend_text_size),
legend.position = c(0.8,0.8))
## p3: rho = 0.2, mutate = 1e-4
rho = 0.2
theta = 1e-4
sampled$pn = unlist(lapply(sampled$proposed, FUN = function(k){
return(exp(log_pN(k, rho)))
}))
sampled$pngm = unlist(lapply(sampled$proposed, FUN = function(k){
return(pN_gM(k, rho, theta))
}))
pm = pM_approx(nu = nu, theta = theta, rho = rho)
sampled$pngm = sampled$pngm / pm
sampled$diff = abs(log(sampled$pngm) - log(sampled$pn))
intersect$close[3] = sampled$proposed[which(sampled$diff == min(sampled$diff))]
p3 = ggplot(sampled[1:plot_range, ])+
geom_point(aes(x = log10(proposed), y = log10(pn), color = 'N'), size = 0.4)+
geom_line(aes(x = log10(proposed), y = log10(pn), color = 'N'), linetype = 2, size=0.2)+
geom_point(aes(x = log10(proposed), y = log10(pngm), color = 'N|M=1'), size = 0.4)+
geom_line(aes(x = log10(proposed), y = log10(pngm), color = 'N|M=1'), linetype = 2, size=0.2)+
scale_color_manual(name = "Prob. mass", values = c("N" = "darkblue", "N|M=1" = "red"))+
labs( x= 'log10(N)', y = 'log10(Prob. mass)', title = '\u03c1=0.2; \u03b8=1e-4')+
theme(axis.title = element_text(size = axis_title_size),
axis.text = element_text(size = axis_text_size),
legend.title = element_text(size = legend_title_size),
legend.text = element_text(size = legend_text_size),
legend.position = c(0.8,0.8))
## p4: rho = 0.1, mutate = 1e-5
rho = 0.1
theta = 1e-5
sampled$pn = unlist(lapply(sampled$proposed, FUN = function(k){
return(exp(log_pN(k, rho)))
}))
sampled$pngm = unlist(lapply(sampled$proposed, FUN = function(k){
return(pN_gM(k, rho, theta))
}))
pm = pM_approx(nu = nu, theta = theta, rho = rho)
sampled$pngm = sampled$pngm / pm
sampled$diff = abs(log(sampled$pngm) - log(sampled$pn))
intersect$close[4] = sampled$proposed[which(sampled$diff == min(sampled$diff))]
p4 = ggplot(sampled[1:plot_range, ])+
geom_point(aes(x = log10(proposed), y = log10(pn), color = 'N'), size = 0.4)+
geom_line(aes(x = log10(proposed), y = log10(pn), color = 'N'), linetype = 2, size=0.2)+
geom_point(aes(x = log10(proposed), y = log10(pngm), color = 'N|M=1'), size = 0.4)+
geom_line(aes(x = log10(proposed), y = log10(pngm), color = 'N|M=1'), linetype = 2, size=0.2)+
scale_color_manual(name = "Prob. mass", values = c("N" = "darkblue", "N|M=1" = "red"))+
labs( x= 'log10(N)', y = 'log10(Prob. mass)', title = '\u03c1=0.1; \u03b8=1e-5')+
theme(axis.title = element_text(size = axis_title_size),
axis.text = element_text(size = axis_text_size),
legend.title = element_text(size = legend_title_size),
legend.text = element_text(size = legend_text_size),
legend.position = c(0.8,0.8))
## p5: rho = 0.15, mutate = 1e-5
rho = 0.15
theta = 1e-5
sampled$pn = unlist(lapply(sampled$proposed, FUN = function(k){
return(exp(log_pN(k, rho)))
}))
sampled$pngm = unlist(lapply(sampled$proposed, FUN = function(k){
return(pN_gM(k, rho, theta))
}))
pm = pM_approx(nu = nu, theta = theta, rho = rho)
sampled$pngm = sampled$pngm / pm
sampled$diff = abs(log(sampled$pngm) - log(sampled$pn))
intersect$close[5] = sampled$proposed[which(sampled$diff == min(sampled$diff))]
p5 = ggplot(sampled[1:plot_range, ])+
geom_point(aes(x = log10(proposed), y = log10(pn), color = 'N'), size = 0.4)+
geom_line(aes(x = log10(proposed), y = log10(pn), color = 'N'), linetype = 2, size=0.2)+
geom_point(aes(x = log10(proposed), y = log10(pngm), color = 'N|M=1'), size = 0.4)+
geom_line(aes(x = log10(proposed), y = log10(pngm), color = 'N|M=1'), linetype = 2, size=0.2)+
scale_color_manual(name = "Prob. mass", values = c("N" = "darkblue", "N|M=1" = "red"))+
labs( x= 'log10(N)', y = 'log10(Prob. mass)', title = '\u03c1=0.15; \u03b8=1e-5')+
theme(axis.title = element_text(size = axis_title_size),
axis.text = element_text(size = axis_text_size),
legend.title = element_text(size = legend_title_size),
legend.text = element_text(size = legend_text_size),
legend.position = c(0.8,0.8))
## p6: rho = 0.2, mutate = 1e-5
rho = 0.2
theta = 1e-5
sampled$pn = unlist(lapply(sampled$proposed, FUN = function(k){
return(exp(log_pN(k, rho)))
}))
sampled$pngm = unlist(lapply(sampled$proposed, FUN = function(k){
return(pN_gM(k, rho, theta))
}))
pm = pM_approx(nu = nu, theta = theta, rho = rho)
sampled$pngm = sampled$pngm / pm
sampled$diff = abs(log(sampled$pngm) - log(sampled$pn))
intersect$close[6] = sampled$proposed[which(sampled$diff == min(sampled$diff))]
p6 = ggplot(sampled[1:plot_range, ])+
geom_point(aes(x = log10(proposed), y = log10(pn), color = 'N'), size = 0.4)+
geom_line(aes(x = log10(proposed), y = log10(pn), color = 'N'), linetype = 2, size=0.2)+
geom_point(aes(x = log10(proposed), y = log10(pngm), color = 'N|M=1'), size = 0.4)+
geom_line(aes(x = log10(proposed), y = log10(pngm), color = 'N|M=1'), linetype = 2, size=0.2)+
scale_color_manual(name = "Prob. mass", values = c("N" = "darkblue", "N|M=1" = "red"))+
labs( x= 'log10(N)', y = 'log10(Prob. mass)', title = '\u03c1=0.2; \u03b8=1e-5')+
theme(axis.title = element_text(size = axis_title_size),
axis.text = element_text(size = axis_text_size),
legend.title = element_text(size = legend_title_size),
legend.text = element_text(size = legend_text_size),
legend.position = c(0.8,0.8))
## p7: rho = 0.1, mutate = 1e-6
rho = 0.1
theta = 1e-6
sampled$pn = unlist(lapply(sampled$proposed, FUN = function(k){
return(exp(log_pN(k, rho)))
}))
sampled$pngm = unlist(lapply(sampled$proposed, FUN = function(k){
return(pN_gM(k, rho, theta))
}))
pm = pM_approx(nu = nu, theta = theta, rho = rho)
sampled$pngm = sampled$pngm / pm
sampled$diff = abs(log(sampled$pngm) - log(sampled$pn))
intersect$close[7] = sampled$proposed[which(sampled$diff == min(sampled$diff))]
p7 = ggplot(sampled[1:plot_range, ])+
geom_point(aes(x = log10(proposed), y = log10(pn), color = 'N'), size = 0.4)+
geom_line(aes(x = log10(proposed), y = log10(pn), color = 'N'), linetype = 2, size=0.2)+
geom_point(aes(x = log10(proposed), y = log10(pngm), color = 'N|M=1'), size = 0.4)+
geom_line(aes(x = log10(proposed), y = log10(pngm), color = 'N|M=1'), linetype = 2, size=0.2)+
scale_color_manual(name = "Prob. mass", values = c("N" = "darkblue", "N|M=1" = "red"))+
labs( x= 'log10(N)', y = 'log10(Prob. mass)', title = '\u03c1=0.1; \u03b8=1e-6')+
theme(axis.title = element_text(size = axis_title_size),
axis.text = element_text(size = axis_text_size),
legend.title = element_text(size = legend_title_size),
legend.text = element_text(size = legend_text_size),
legend.position = c(0.8,0.8))
## p8: rho = 0.15, mutate = 1e-6
rho = 0.15
theta = 1e-6
sampled$pn = unlist(lapply(sampled$proposed, FUN = function(k){
return(exp(log_pN(k, rho)))
}))
sampled$pngm = unlist(lapply(sampled$proposed, FUN = function(k){
return(pN_gM(k, rho, theta))
}))
pm = pM_approx(nu = nu, theta = theta, rho = rho)
sampled$pngm = sampled$pngm / pm
sampled$diff = abs(log(sampled$pngm) - log(sampled$pn))
intersect$close[8] = sampled$proposed[which(sampled$diff == min(sampled$diff))]
p8 = ggplot(sampled[1:plot_range, ])+
geom_point(aes(x = log10(proposed), y = log10(pn), color = 'N'), size = 0.4)+
geom_line(aes(x = log10(proposed), y = log10(pn), color = 'N'), linetype = 2, size=0.2)+
geom_point(aes(x = log10(proposed), y = log10(pngm), color = 'N|M=1'), size = 0.4)+
geom_line(aes(x = log10(proposed), y = log10(pngm), color = 'N|M=1'), linetype = 2, size=0.2)+
scale_color_manual(name = "Prob. mass", values = c("N" = "darkblue", "N|M=1" = "red"))+
labs( x= 'log10(N)', y = 'log10(Prob. mass)', title = '\u03c1=0.15; \u03b8=1e-6')+
theme(axis.title = element_text(size = axis_title_size),
axis.text = element_text(size = axis_text_size),
legend.title = element_text(size = legend_title_size),
legend.text = element_text(size = legend_text_size),
legend.position = c(0.8,0.8))
## p9: rho = 0.2, mutate = 1e-6
rho = 0.2
theta = 1e-6
sampled$pn = unlist(lapply(sampled$proposed, FUN = function(k){
return(exp(log_pN(k, rho)))
}))
sampled$pngm = unlist(lapply(sampled$proposed, FUN = function(k){
return(pN_gM(k, rho, theta))
}))
pm = pM_approx(nu = nu, theta = theta, rho = rho)
sampled$pngm = sampled$pngm / pm
sampled$diff = abs(log(sampled$pngm) - log(sampled$pn))
intersect$close[9] = sampled$proposed[which(sampled$diff == min(sampled$diff))]
p9 = ggplot(sampled[1:plot_range, ])+
geom_point(aes(x = log10(proposed), y = log10(pn), color = 'N'), size = 0.4)+
geom_line(aes(x = log10(proposed), y = log10(pn), color = 'N'), linetype = 2, size=0.2)+
geom_point(aes(x = log10(proposed), y = log10(pngm), color = 'N|M=1'), size = 0.4)+
geom_line(aes(x = log10(proposed), y = log10(pngm), color = 'N|M=1'), linetype = 2, size=0.2)+
scale_color_manual(name = "Prob. mass", values = c("N" = "darkblue", "N|M=1" = "red"))+
labs( x= 'log10(N)', y = 'log10(Prob. mass)', title = '\u03c1=0.2; \u03b8=1e-6')+
theme(axis.title = element_text(size = axis_title_size),
axis.text = element_text(size = axis_text_size),
legend.title = element_text(size = legend_title_size),
legend.text = element_text(size = legend_text_size),
legend.position = c(0.8,0.8))
myGrobs <- list(p1, p2, p3, p4, p5, p6, p7, p8, p9)
gridExtra::grid.arrange(grobs = myGrobs, nrow = 3,ncol = 3)
load('~/RAwork/BOISE/BOISE_followup/fda_data_rearranged.RData')
### visualization
# lof function for ranking of block matrices
lof <- function(Z){
binary_str = apply(Z, 2, function(z){
return(paste(z, collapse = ""))
})
col_order = order(binary_str, decreasing = T)
return(Z[, col_order])
}
# Get rearranged columns / rows
block_res$col_block = lof(block_res$col_block)
block_res$row_block = lof(block_res$row_block)
active_ind = apply(block_res$col_block, 2, sum)
active_ind = which(active_ind > 0)
cpds = colnames(block_res$col_block[, active_ind])
## rearrange row indices to make better visualization
end = 1
k = 1
assays = colnames(block_res$row_block)
while (k <= nrow(block_res$row_block)) {
begin = end
while (block_res$row_block[k, end] == 1) {
end = end + 1
}
assays[begin:(end-1)] = rev(assays[begin:(end-1)])
k = k+1
}
block_res$row_block = block_res$row_block[, assays]
## visualize blocked data
rotate <- function(x) t(apply(x, 2, rev))
A = dat[assays, cpds]
A = (1 + A) / 2
A[is.na(A)] = 0
# image(rotate(dat))
image(rotate(A), axes = F, xlab = 'Compounds', ylab = 'Targets')
mtext(text=seq(0, 600, 100), side=2, line=0.5, at=seq(0, 600, 100) / 688, las=1, cex=1)
mtext(text=seq(0, 1200, 100), side=1, line=0.5, at=seq(0, 1200, 100) / 1262, las=1, cex=1)
## 1st round: largest complete data matrix
setwd('~/RAwork/BOISE/BOISE_followup/')
set.seed(2)
load('fda_data_short.RData')
assay = unique(data_short$PUBCHEM_AID)
cpd = unique(data_short$PUBCHEM_CID)
dat = matrix(NA, nrow = length(assay), ncol = length(cpd))
rownames(dat) = assay
colnames(dat) = cpd
for (i in 1:nrow(data_short)) {
if(data_short$PUBCHEM_OUTCOME[i] == 'Active'){
dat[data_short$PUBCHEM_AID[i], data_short$PUBCHEM_CID[i]] = 1
} else{
dat[data_short$PUBCHEM_AID[i], data_short$PUBCHEM_CID[i]] = 0
}
}
mean(dat, na.rm = T)
mean(is.na(dat))
row_counts = apply(dat, 1, function(x){return(sum(is.na(x)))})
row_counts = apply(dat, 1, function(x){return(mean(is.na(x)))})
hist(row_counts, xlab = 'Missing rate on assay', ylab = 'Counts')
hist(row_counts, breaks = 2-,xlab = 'Missing rate on assay', ylab = 'Counts')
hist(row_counts, breaks = 20,xlab = 'Missing rate on assay', ylab = 'Counts')
hist(row_counts, breaks = 50,xlab = 'Missing rate on assay', ylab = 'Counts')
par(mfrow = c(1,2))
row_counts = apply(dat, 1, function(x){return(mean(is.na(x)))})
hist(row_counts, breaks = 50,xlab = 'Missing rate', ylab = 'Counts', main = 'Hist of NA Rate in Assays')
col_counts = apply(dat, 2, function(x){return(mean(is.na(x)))})
hist(col_counts, breaks = 50,xlab = 'Missing rate', ylab = 'Counts', main = 'Hist of NA Rate in Cpds')
par(mfrow = c(1,2))
row_counts = apply(dat, 1, function(x){return(mean(is.na(x)))})
hist(row_counts, breaks = 50,xlab = 'Missing rate', ylab = 'Counts', main = 'Hist of NA Rate in Assays')
col_counts = apply(dat, 2, function(x){return(mean(is.na(x)))})
hist(col_counts, breaks = 50,xlab = 'Missing rate', ylab = 'Counts', main = 'Hist of NA Rate in Compounds')
sort(row_counts, decreasing = T)
load('fda_data_rearranged.RData')
### visualization
# lof function for ranking of block matrices
lof <- function(Z){
binary_str = apply(Z, 2, function(z){
return(paste(z, collapse = ""))
})
col_order = order(binary_str, decreasing = T)
return(Z[, col_order])
}
# Get rearranged columns / rows
block_res$col_block = lof(block_res$col_block)
block_res$row_block = lof(block_res$row_block)
active_ind = apply(block_res$col_block, 2, sum)
active_ind = which(active_ind > 0)
cpds = colnames(block_res$col_block[, active_ind])
## rearrange row indices to make better visualization
end = 1
k = 1
assays = colnames(block_res$row_block)
while (k <= nrow(block_res$row_block)) {
begin = end
while (block_res$row_block[k, end] == 1) {
end = end + 1
}
assays[begin:(end-1)] = rev(assays[begin:(end-1)])
k = k+1
}
block_res$row_block = block_res$row_block[, assays]
apply(block_res$row_block, 1, sum)
apply(block_res$col_block, 1, sum)
117*47
29*24
setwd('~/RAwork/BOISE/BOISE_followup/')
load('fda_data_rearranged.RData')
block_res$row_block = block_res$row_block[1:5,]
block_res$col_block = block_res$col_block[1:5,]
active_ind = apply(block_res$col_block, 2, sum)
active_ind = which(active_ind > 0)
cpds = colnames(block_res$col_block[, active_ind])
dat = dat[, cpds] ### Missing rate on residual is 92.9%
mean(is.na(dat))
mean(dat, na.rm = T)
dim(dat)
### visualization
# lof function for ranking of block matrices
lof <- function(Z){
binary_str = apply(Z, 2, function(z){
return(paste(z, collapse = ""))
})
col_order = order(binary_str, decreasing = T)
return(Z[, col_order])
}
# Get rearranged columns / rows
block_res$col_block = lof(block_res$col_block)
block_res$row_block = lof(block_res$row_block)
active_ind = apply(block_res$col_block, 2, sum)
active_ind = which(active_ind > 0)
cpds = colnames(block_res$col_block[, active_ind])
## rearrange row indices to make better visualization
end = 1
k = 1
assays = colnames(block_res$row_block)
while (k <= nrow(block_res$row_block)) {
begin = end
while (block_res$row_block[k, end] == 1) {
end = end + 1
}
assays[begin:(end-1)] = rev(assays[begin:(end-1)])
k = k+1
}
block_res$row_block = block_res$row_block[, assays]
## visualize blocked data
rotate <- function(x) t(apply(x, 2, rev))
A = dat[assays, cpds]
A = (1 + A) / 2
A[is.na(A)] = 0
# image(rotate(dat))
image(rotate(A), axes = F, xlab = 'Compounds', ylab = 'Targets')
mtext(text=seq(0, 600, 100), side=2, line=0.5, at=seq(0, 600, 100) / 688, las=1, cex=1)
mtext(text=seq(0, 900, 100), side=1, line=0.5, at=seq(0, 900, 100) / 933, las=1, cex=1)
par(mfrow = c(1,1))
# image(rotate(dat))
image(rotate(A), axes = F, xlab = 'Compounds', ylab = 'Targets')
mtext(text=seq(0, 600, 50), side=2, line=0.5, at=seq(0, 600, 50) / 688, las=1, cex=1)
mtext(text=seq(0, 900, 50), side=1, line=0.5, at=seq(0, 900, 50) / 933, las=1, cex=1)
