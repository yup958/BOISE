zeta_sum = VGAM::zeta(x = 1+rho+2*theta, shift = nu+1)
pm = pm - constant_term * zeta_sum
return(pm)
}
### P(N|M)
pN_gM <- function(n, rho, theta){
if(n == 1){
return(-Inf) ### not possible as we assume no division no mutation
} else{
lpn = log_pN(n, rho) ## P(N)
lpmgn = log_pM_gN(n, theta)
return(exp(lpn+lpmgn))
}
}
nrange = 1e7
plot_range = 1e5
rho = 0.1
theta = 1e-5
nu = 1e7
axis_title_size = 16
axis_text_size = 15
legend_title_size = 13
legend_text_size = 13
### Pure birth model
sampled = data.frame(proposed = 2:nrange)
### more plots
nrange = 1e7
plot_range = 1e5
intersect = data.frame(rho = rep(c(0.1,0.15,0.2), 3), theta = c(rep(1e-4, 3), rep(1e-5, 3), rep(1e-6, 3)))
## p1: rho = 0.1, mutate = 1e-4
rho = 0.1
theta = 1e-4
sampled = data.frame(proposed = 2:nrange)
sampled$pn = unlist(lapply(sampled$proposed, FUN = function(k){
return(exp(log_pN(k, rho)))
}))
sampled$pngm = unlist(lapply(sampled$proposed, FUN = function(k){
return(pN_gM(k, rho, theta))
}))
pm = pM_approx(nu = nu, theta = theta, rho = rho)
sampled$pngm = sampled$pngm / pm
sampled$diff = abs(log(sampled$pngm) - log(sampled$pn))
intersect$close[1] = sampled$proposed[which(sampled$diff == min(sampled$diff))]
p1 = ggplot(sampled[1:plot_range, ])+
geom_point(aes(x = log10(proposed), y = log10(pn), color = 'N'), size = 0.4)+
geom_line(aes(x = log10(proposed), y = log10(pn), color = 'N'), linetype = 2, size=0.2)+
geom_point(aes(x = log10(proposed), y = log10(pngm), color = 'N|M=1'), size = 0.4)+
geom_line(aes(x = log10(proposed), y = log10(pngm), color = 'N|M=1'), linetype = 2, size=0.2)+
scale_color_manual(name = "Prob. mass", values = c("N" = "darkblue", "N|M=1" = "red"))+
labs( x= 'log10(N)', y = 'log10(Prob. mass)', title = '\u03c1=0.1; \u03b8=0.0001')+
theme(axis.title = element_text(size = axis_title_size),
axis.text = element_text(size = axis_text_size),
legend.title = element_text(size = legend_title_size),
legend.text = element_text(size = legend_text_size),
legend.position = c(0.8,0.8))
p1
## p2: rho = 0.15, mutate = 1e-4
rho = 0.15
theta = 1e-4
sampled$pn = unlist(lapply(sampled$proposed, FUN = function(k){
return(exp(log_pN(k, rho)))
}))
sampled$pngm = unlist(lapply(sampled$proposed, FUN = function(k){
return(pN_gM(k, rho, theta))
}))
pm = pM_approx(nu = nu, theta = theta, rho = rho)
sampled$pngm = sampled$pngm / pm
sampled$diff = abs(log(sampled$pngm) - log(sampled$pn))
intersect$close[2] = sampled$proposed[which(sampled$diff == min(sampled$diff))]
### more plots
nrange = 1e7
plot_range = 1e5
intersect = data.frame(rho = rep(c(0.1,0.15,0.2), 3), theta = c(rep(1e-4, 3), rep(1e-5, 3), rep(1e-6, 3)))
## p1: rho = 0.1, mutate = 1e-4
rho = 0.1
theta = 1e-4
sampled = data.frame(proposed = 2:nrange)
sampled$pn = unlist(lapply(sampled$proposed, FUN = function(k){
return(exp(log_pN(k, rho)))
}))
sampled$pngm = unlist(lapply(sampled$proposed, FUN = function(k){
return(pN_gM(k, rho, theta))
}))
pm = pM_approx(nu = nu, theta = theta, rho = rho)
sampled$pngm = sampled$pngm / pm
sampled$diff = abs(log(sampled$pngm) - log(sampled$pn))
intersect$close[1] = sampled$proposed[which(sampled$diff == min(sampled$diff))]
p1 = ggplot(sampled[1:plot_range, ])+
geom_point(aes(x = log10(proposed), y = log10(pn), color = 'N'), size = 0.4)+
geom_line(aes(x = log10(proposed), y = log10(pn), color = 'N'), linetype = 2, size=0.2)+
geom_point(aes(x = log10(proposed), y = log10(pngm), color = 'N|M=1'), size = 0.4)+
geom_line(aes(x = log10(proposed), y = log10(pngm), color = 'N|M=1'), linetype = 2, size=0.2)+
scale_color_manual(name = "Prob. mass", values = c("N" = "darkblue", "N|M=1" = "red"))+
labs( x= 'log10(N)', y = 'log10(Prob. mass)', title = '\u03c1=0.1; \u03b8=1e-4')+
theme(axis.title = element_text(size = axis_title_size),
axis.text = element_text(size = axis_text_size),
legend.title = element_text(size = legend_title_size),
legend.text = element_text(size = legend_text_size),
legend.position = c(0.8,0.8))
p1
## p2: rho = 0.15, mutate = 1e-4
rho = 0.15
theta = 1e-4
sampled$pn = unlist(lapply(sampled$proposed, FUN = function(k){
return(exp(log_pN(k, rho)))
}))
sampled$pngm = unlist(lapply(sampled$proposed, FUN = function(k){
return(pN_gM(k, rho, theta))
}))
pm = pM_approx(nu = nu, theta = theta, rho = rho)
sampled$pngm = sampled$pngm / pm
sampled$diff = abs(log(sampled$pngm) - log(sampled$pn))
intersect$close[2] = sampled$proposed[which(sampled$diff == min(sampled$diff))]
p2 = ggplot(sampled[1:plot_range, ])+
geom_point(aes(x = log10(proposed), y = log10(pn), color = 'N'), size = 0.4)+
geom_line(aes(x = log10(proposed), y = log10(pn), color = 'N'), linetype = 2, size=0.2)+
geom_point(aes(x = log10(proposed), y = log10(pngm), color = 'N|M=1'), size = 0.4)+
geom_line(aes(x = log10(proposed), y = log10(pngm), color = 'N|M=1'), linetype = 2, size=0.2)+
scale_color_manual(name = "Prob. mass", values = c("N" = "darkblue", "N|M=1" = "red"))+
labs( x= 'log10(N)', y = 'log10(Prob. mass)', title = '\u03c1=0.15; \u03b8=1e-4')+
theme(axis.title = element_text(size = axis_title_size),
axis.text = element_text(size = axis_text_size),
legend.title = element_text(size = legend_title_size),
legend.text = element_text(size = legend_text_size),
legend.position = c(0.8,0.8))
## p3: rho = 0.2, mutate = 1e-4
rho = 0.2
theta = 1e-4
sampled$pn = unlist(lapply(sampled$proposed, FUN = function(k){
return(exp(log_pN(k, rho)))
}))
sampled$pngm = unlist(lapply(sampled$proposed, FUN = function(k){
return(pN_gM(k, rho, theta))
}))
pm = pM_approx(nu = nu, theta = theta, rho = rho)
sampled$pngm = sampled$pngm / pm
sampled$diff = abs(log(sampled$pngm) - log(sampled$pn))
intersect$close[3] = sampled$proposed[which(sampled$diff == min(sampled$diff))]
p3 = ggplot(sampled[1:plot_range, ])+
geom_point(aes(x = log10(proposed), y = log10(pn), color = 'N'), size = 0.4)+
geom_line(aes(x = log10(proposed), y = log10(pn), color = 'N'), linetype = 2, size=0.2)+
geom_point(aes(x = log10(proposed), y = log10(pngm), color = 'N|M=1'), size = 0.4)+
geom_line(aes(x = log10(proposed), y = log10(pngm), color = 'N|M=1'), linetype = 2, size=0.2)+
scale_color_manual(name = "Prob. mass", values = c("N" = "darkblue", "N|M=1" = "red"))+
labs( x= 'log10(N)', y = 'log10(Prob. mass)', title = '\u03c1=0.2; \u03b8=1e-4')+
theme(axis.title = element_text(size = axis_title_size),
axis.text = element_text(size = axis_text_size),
legend.title = element_text(size = legend_title_size),
legend.text = element_text(size = legend_text_size),
legend.position = c(0.8,0.8))
## p4: rho = 0.1, mutate = 1e-5
rho = 0.1
theta = 1e-5
sampled$pn = unlist(lapply(sampled$proposed, FUN = function(k){
return(exp(log_pN(k, rho)))
}))
sampled$pngm = unlist(lapply(sampled$proposed, FUN = function(k){
return(pN_gM(k, rho, theta))
}))
pm = pM_approx(nu = nu, theta = theta, rho = rho)
sampled$pngm = sampled$pngm / pm
sampled$diff = abs(log(sampled$pngm) - log(sampled$pn))
intersect$close[4] = sampled$proposed[which(sampled$diff == min(sampled$diff))]
p4 = ggplot(sampled[1:plot_range, ])+
geom_point(aes(x = log10(proposed), y = log10(pn), color = 'N'), size = 0.4)+
geom_line(aes(x = log10(proposed), y = log10(pn), color = 'N'), linetype = 2, size=0.2)+
geom_point(aes(x = log10(proposed), y = log10(pngm), color = 'N|M=1'), size = 0.4)+
geom_line(aes(x = log10(proposed), y = log10(pngm), color = 'N|M=1'), linetype = 2, size=0.2)+
scale_color_manual(name = "Prob. mass", values = c("N" = "darkblue", "N|M=1" = "red"))+
labs( x= 'log10(N)', y = 'log10(Prob. mass)', title = '\u03c1=0.1; \u03b8=1e-5')+
theme(axis.title = element_text(size = axis_title_size),
axis.text = element_text(size = axis_text_size),
legend.title = element_text(size = legend_title_size),
legend.text = element_text(size = legend_text_size),
legend.position = c(0.8,0.8))
## p5: rho = 0.15, mutate = 1e-5
rho = 0.15
theta = 1e-5
sampled$pn = unlist(lapply(sampled$proposed, FUN = function(k){
return(exp(log_pN(k, rho)))
}))
sampled$pngm = unlist(lapply(sampled$proposed, FUN = function(k){
return(pN_gM(k, rho, theta))
}))
pm = pM_approx(nu = nu, theta = theta, rho = rho)
sampled$pngm = sampled$pngm / pm
sampled$diff = abs(log(sampled$pngm) - log(sampled$pn))
intersect$close[5] = sampled$proposed[which(sampled$diff == min(sampled$diff))]
p5 = ggplot(sampled[1:plot_range, ])+
geom_point(aes(x = log10(proposed), y = log10(pn), color = 'N'), size = 0.4)+
geom_line(aes(x = log10(proposed), y = log10(pn), color = 'N'), linetype = 2, size=0.2)+
geom_point(aes(x = log10(proposed), y = log10(pngm), color = 'N|M=1'), size = 0.4)+
geom_line(aes(x = log10(proposed), y = log10(pngm), color = 'N|M=1'), linetype = 2, size=0.2)+
scale_color_manual(name = "Prob. mass", values = c("N" = "darkblue", "N|M=1" = "red"))+
labs( x= 'log10(N)', y = 'log10(Prob. mass)', title = '\u03c1=0.15; \u03b8=1e-5')+
theme(axis.title = element_text(size = axis_title_size),
axis.text = element_text(size = axis_text_size),
legend.title = element_text(size = legend_title_size),
legend.text = element_text(size = legend_text_size),
legend.position = c(0.8,0.8))
## p6: rho = 0.2, mutate = 1e-5
rho = 0.2
theta = 1e-5
sampled$pn = unlist(lapply(sampled$proposed, FUN = function(k){
return(exp(log_pN(k, rho)))
}))
sampled$pngm = unlist(lapply(sampled$proposed, FUN = function(k){
return(pN_gM(k, rho, theta))
}))
pm = pM_approx(nu = nu, theta = theta, rho = rho)
sampled$pngm = sampled$pngm / pm
sampled$diff = abs(log(sampled$pngm) - log(sampled$pn))
intersect$close[6] = sampled$proposed[which(sampled$diff == min(sampled$diff))]
p6 = ggplot(sampled[1:plot_range, ])+
geom_point(aes(x = log10(proposed), y = log10(pn), color = 'N'), size = 0.4)+
geom_line(aes(x = log10(proposed), y = log10(pn), color = 'N'), linetype = 2, size=0.2)+
geom_point(aes(x = log10(proposed), y = log10(pngm), color = 'N|M=1'), size = 0.4)+
geom_line(aes(x = log10(proposed), y = log10(pngm), color = 'N|M=1'), linetype = 2, size=0.2)+
scale_color_manual(name = "Prob. mass", values = c("N" = "darkblue", "N|M=1" = "red"))+
labs( x= 'log10(N)', y = 'log10(Prob. mass)', title = '\u03c1=0.2; \u03b8=1e-5')+
theme(axis.title = element_text(size = axis_title_size),
axis.text = element_text(size = axis_text_size),
legend.title = element_text(size = legend_title_size),
legend.text = element_text(size = legend_text_size),
legend.position = c(0.8,0.8))
## p7: rho = 0.1, mutate = 1e-6
rho = 0.1
theta = 1e-6
sampled$pn = unlist(lapply(sampled$proposed, FUN = function(k){
return(exp(log_pN(k, rho)))
}))
sampled$pngm = unlist(lapply(sampled$proposed, FUN = function(k){
return(pN_gM(k, rho, theta))
}))
pm = pM_approx(nu = nu, theta = theta, rho = rho)
sampled$pngm = sampled$pngm / pm
sampled$diff = abs(log(sampled$pngm) - log(sampled$pn))
intersect$close[7] = sampled$proposed[which(sampled$diff == min(sampled$diff))]
p7 = ggplot(sampled[1:plot_range, ])+
geom_point(aes(x = log10(proposed), y = log10(pn), color = 'N'), size = 0.4)+
geom_line(aes(x = log10(proposed), y = log10(pn), color = 'N'), linetype = 2, size=0.2)+
geom_point(aes(x = log10(proposed), y = log10(pngm), color = 'N|M=1'), size = 0.4)+
geom_line(aes(x = log10(proposed), y = log10(pngm), color = 'N|M=1'), linetype = 2, size=0.2)+
scale_color_manual(name = "Prob. mass", values = c("N" = "darkblue", "N|M=1" = "red"))+
labs( x= 'log10(N)', y = 'log10(Prob. mass)', title = '\u03c1=0.1; \u03b8=1e-6')+
theme(axis.title = element_text(size = axis_title_size),
axis.text = element_text(size = axis_text_size),
legend.title = element_text(size = legend_title_size),
legend.text = element_text(size = legend_text_size),
legend.position = c(0.8,0.8))
## p8: rho = 0.15, mutate = 1e-6
rho = 0.15
theta = 1e-6
sampled$pn = unlist(lapply(sampled$proposed, FUN = function(k){
return(exp(log_pN(k, rho)))
}))
sampled$pngm = unlist(lapply(sampled$proposed, FUN = function(k){
return(pN_gM(k, rho, theta))
}))
pm = pM_approx(nu = nu, theta = theta, rho = rho)
sampled$pngm = sampled$pngm / pm
sampled$diff = abs(log(sampled$pngm) - log(sampled$pn))
intersect$close[8] = sampled$proposed[which(sampled$diff == min(sampled$diff))]
p8 = ggplot(sampled[1:plot_range, ])+
geom_point(aes(x = log10(proposed), y = log10(pn), color = 'N'), size = 0.4)+
geom_line(aes(x = log10(proposed), y = log10(pn), color = 'N'), linetype = 2, size=0.2)+
geom_point(aes(x = log10(proposed), y = log10(pngm), color = 'N|M=1'), size = 0.4)+
geom_line(aes(x = log10(proposed), y = log10(pngm), color = 'N|M=1'), linetype = 2, size=0.2)+
scale_color_manual(name = "Prob. mass", values = c("N" = "darkblue", "N|M=1" = "red"))+
labs( x= 'log10(N)', y = 'log10(Prob. mass)', title = '\u03c1=0.15; \u03b8=1e-6')+
theme(axis.title = element_text(size = axis_title_size),
axis.text = element_text(size = axis_text_size),
legend.title = element_text(size = legend_title_size),
legend.text = element_text(size = legend_text_size),
legend.position = c(0.8,0.8))
## p9: rho = 0.2, mutate = 1e-6
rho = 0.2
theta = 1e-6
sampled$pn = unlist(lapply(sampled$proposed, FUN = function(k){
return(exp(log_pN(k, rho)))
}))
sampled$pngm = unlist(lapply(sampled$proposed, FUN = function(k){
return(pN_gM(k, rho, theta))
}))
pm = pM_approx(nu = nu, theta = theta, rho = rho)
sampled$pngm = sampled$pngm / pm
sampled$diff = abs(log(sampled$pngm) - log(sampled$pn))
intersect$close[9] = sampled$proposed[which(sampled$diff == min(sampled$diff))]
p9 = ggplot(sampled[1:plot_range, ])+
geom_point(aes(x = log10(proposed), y = log10(pn), color = 'N'), size = 0.4)+
geom_line(aes(x = log10(proposed), y = log10(pn), color = 'N'), linetype = 2, size=0.2)+
geom_point(aes(x = log10(proposed), y = log10(pngm), color = 'N|M=1'), size = 0.4)+
geom_line(aes(x = log10(proposed), y = log10(pngm), color = 'N|M=1'), linetype = 2, size=0.2)+
scale_color_manual(name = "Prob. mass", values = c("N" = "darkblue", "N|M=1" = "red"))+
labs( x= 'log10(N)', y = 'log10(Prob. mass)', title = '\u03c1=0.2; \u03b8=1e-6')+
theme(axis.title = element_text(size = axis_title_size),
axis.text = element_text(size = axis_text_size),
legend.title = element_text(size = legend_title_size),
legend.text = element_text(size = legend_text_size),
legend.position = c(0.8,0.8))
myGrobs <- list(p1, p2, p3, p4, p5, p6, p7, p8, p9)
gridExtra::grid.arrange(grobs = myGrobs, nrow = 3,ncol = 3)
load('~/RAwork/BOISE/BOISE_followup/fda_data_rearranged.RData')
### visualization
# lof function for ranking of block matrices
lof <- function(Z){
binary_str = apply(Z, 2, function(z){
return(paste(z, collapse = ""))
})
col_order = order(binary_str, decreasing = T)
return(Z[, col_order])
}
# Get rearranged columns / rows
block_res$col_block = lof(block_res$col_block)
block_res$row_block = lof(block_res$row_block)
active_ind = apply(block_res$col_block, 2, sum)
active_ind = which(active_ind > 0)
cpds = colnames(block_res$col_block[, active_ind])
## rearrange row indices to make better visualization
end = 1
k = 1
assays = colnames(block_res$row_block)
while (k <= nrow(block_res$row_block)) {
begin = end
while (block_res$row_block[k, end] == 1) {
end = end + 1
}
assays[begin:(end-1)] = rev(assays[begin:(end-1)])
k = k+1
}
block_res$row_block = block_res$row_block[, assays]
## visualize blocked data
rotate <- function(x) t(apply(x, 2, rev))
A = dat[assays, cpds]
A = (1 + A) / 2
A[is.na(A)] = 0
# image(rotate(dat))
image(rotate(A), axes = F, xlab = 'Compounds', ylab = 'Targets')
mtext(text=seq(0, 600, 100), side=2, line=0.5, at=seq(0, 600, 100) / 688, las=1, cex=1)
mtext(text=seq(0, 1200, 100), side=1, line=0.5, at=seq(0, 1200, 100) / 1262, las=1, cex=1)
library(BOISE)
detach("package:BOISE", unload = TRUE)
7870*24
4231*24 + 67494
150000/24
6250/250
105294/24
7870*24
16000*0.06
12000*0.6
215.12+215 + 28.29
458.41/2
12000 * 0.04
262.63 - 30.59
240.62+57.28+19.68
240.62+57.28+2+2.4+4.5
?VGAM::zeta
1296.5+80+43.24
1419.74/2
365/600
350/600
347/600
600*0.56
8/12
7/12
5/12
10/12
13.67*10.58+11.42*8.83
1/3*2951
983/12
27.78*36
5.56*36
gamma(1-0.1)/gamma(1)
gamma(1)
gamma(2-0.1)/gamma(2)
gamma(3-0.1)/gamma(3)
247.35+232.04
479.39/2
gc()
gc()
458/12000
(229.21+158)/3
(458+158)/3
616/12000
(229.21*2+158.59)/3
77.355*2-1.11
110+27.1
312.08 - 27.1
312.08 - 27.07
13.49*24
library(entropy)
fast_Boise <-
function(cl_sample, train, sample_size, nA){
if (!require('entropy')) {
install.packages("entropy")
library(entropy)
}
inform_scores = rep(0, ncol(train))
for (i in 1:sample_size) {
for (j in 1:ncol(train)) {
x = train[, j]
complete_idx = which(!is.na(x))
prev_entropy = entropy(cl_sample$CC[i, complete_idx])
active_idx = which(x==1)
inactive_idx = which(x==0)
active_rate = mean(x, na.rm = T)
post_entropy = 0
if(length(active_idx) > 0){
post_entropy = post_entropy + active_rate * entropy(cl_sample$CC[i, active_idx])
}
if(length(inactive_idx) > 0){
post_entropy = post_entropy + (1-active_rate) * entropy(cl_sample$CC[i, inactive_idx])
}
mutual_info = prev_entropy - post_entropy
inform_scores[j] = inform_scores[j] + mutual_info
}
}
inform = order(inform_scores, decreasing = T)[1:nA]
return(inform)
}
setwd('~/RAwork/BOISE/BOISE_followup/FDA_CV/')
set.seed(817)
id=1
load(paste('~/CHTC_Downloads/FDA_cv/orig_clust_res_', as.character(id), '.RData',sep=''))
fast_Boise(cl_sample, train, sample_size = 100, nA = 100)
inform = fast_Boise(cl_sample, train, sample_size = 100, nA = 100)
a = rep(mean(train, na.rm = T), ncol(train))
b = 1 - a
nT = as.integer(ncol(train) * 0.1)
Evaluate(cl_sample, inform, 'nef', 0.1, test, train, nT,sample_size,a,b,m0)
library(BOISE)
Evaluate(cl_sample, inform, 'nef', 0.1, test, train, nT,sample_size,a,b,m0)
sample_size = 100
Evaluate(cl_sample, inform, 'nef', 0.1, test, train, nT,sample_size,a,b,m0)
Evaluate(cl_sample, inform, 'rocauc', 0.1, test, train, nT,sample_size,a,b,m0)
detach("package:BOISE", unload = TRUE)
remove.packages("BOISE")
devtools::install_github("wiscstatman/esdd/BOISE")
devtools::install_github("wiscstatman/esdd/BOISE")
library(BOISE)
setwd("~/RAwork/BOISE/BOISE_followup/FDA_prospective/")
set.seed(817)
grps = rep(1, 27)
grps[c(5, 6)] = 2
grps[c(7,22)] = 3
grps[17] = 4
## ranking
informs = read.table('~/CHTC_Downloads/FDA_prospective/pros_chem_L1_informer_30.txt', header = F)
sample_size = 250
col_id=1
grp_id = grps[col_id]
load(paste('~/CHTC_Downloads/FDA_prospective/pros_orig_clust_', as.character(grp_id), '.RData', sep = ''))
inform = as.numeric(unlist(strsplit(as.character(informs$V2[grp_id]), split = ' ')))
inform_cid = colnames(train)[inform]
load('~/CHTC_Downloads/FDA_cv/orig_clust_res_1.RData')
inform = fast_Boise(cl_sample, train, sample_size = 100, nA = 100)
inform = fast_boise(cl_sample, train, sample_size = 100, nA = 100)
inform = fast_boise(cl_sample, train, sample_size = 100, nA = 100)
a = rep(mean(train, na.rm = T), ncol(train))
b = 1 - a
nT = as.integer(ncol(train) * 0.1)
Evaluate(cl_sample, inform, 'nef', 0.1, test, train, nT,sample_size,a,b,m0)
sample_size = 100
a = rep(mean(train, na.rm = T), ncol(train))
b = 1 - a
nT = as.integer(ncol(train) * 0.1)
Evaluate(cl_sample, inform, 'nef', 0.1, test, train, nT,sample_size,a,b,m0)
inform = c(547, 571, 10, 96, 200, 358, 266, 327, 74, 223)
load('~/CHTC_Downloads/FDA_cv/testid_1_block.RData')
nT = as.integer(0.1 * ncol(train))
interm_size = 1000
row_sample_size = 100
final_Scores = score_inform(cl, inform, train, m0s, block,
row_sample_size, interm_size, nT, simplified=T, thres = 2^16)
wt = unlist(lapply(final_Scores, function(x){return(unname(x$lg_wt))}))
wt = exp(wt - max(wt))
wt = wt / sum(wt)
pel2 = unlist(lapply(final_Scores, function(x){return(sum(1-unname(x$sc)))}))
pel1 = pel1 + sum(wt * pel2)
wt = unlist(lapply(final_Scores, function(x){return(unname(x$lg_wt))}))
wt = exp(wt - max(wt))
wt = wt / sum(wt)
pel2 = unlist(lapply(final_Scores, function(x){return(sum(1-unname(x$sc)))}))
pel1 = sum(wt * pel2)
inform = c(547, 571, 10, 96, 200, 358, 266, 327, 74, 223)
load('~/CHTC_Downloads/FDA_cv/testid_1_block.RData')
row_sample_size = 100
Scores = evaluate_interm(cl, inform, train, test, m0s, block, row_sample_size)
Response = as.vector(test)
Scores = as.vector(Scores)
rocobj = pROC::roc(response = Response, predictor = Scores, quiet = TRUE)
rocauc = rocobj$auc
detach("package:BOISE", unload = TRUE)
remove.packages("BOISE")
devtools::install_github("wiscstatman/esdd/BOISE")
library(BOISE)
detach("package:BOISE", unload = TRUE)
remove.packages("BOISE")
devtools::install_github("wiscstatman/esdd/BOISE")
library(BOISE)
load('testid_1_block.RData')
load(testid_1_block.RData)
data(testid_1_block)
inform = c(547, 571, 10, 96, 200, 358, 266, 327, 74, 223)
# load block RData file
data(orig_clust_res_1)
remove.packages("BOISE")
devtools::install_github("wiscstatman/esdd/BOISE")
setwd("~/RAwork/BOISE/BOISE_followup/FDA_prospective/")
### Plot
pros_nef_results = read.table('pros_nef_results.txt', header = T)
View(pros_nef_results)
