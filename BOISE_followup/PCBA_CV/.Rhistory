for (k in 1:sample_size){
postls = pel2_beta(P[[k]], x0=train, xA, A=inform, nT, a, b, m0)
log_post_probs[k] = postls$log_post_prob
post_thetas[k, ] = postls$post_theta
}
log_post_probs = log_post_probs - max(log_post_probs)
post_probs = exp(log_post_probs) / (sum(exp(log_post_probs)))
Score = post_probs %*% post_thetas
Score[inform[which(xA==1)]] = rep(1, sum(xA))
Score[inform[which(xA==0)]] = rep(0, nA - sum(xA))
test = as.vector(test)
Score = as.vector(Score)
## nef
nTop = round(length(complete_cid) * 0.01, 0)
top = order(Score,decreasing = T)[1:nTop]
pred_hit = sum(test[top])
hit = sum(test)
maxhit = min(hit,nTop)
nef10 = ((pred_hit/nTop - hit/ncol(train)) / (maxhit/nTop - hit/ncol(train)) + 1)/2
## roc
rocobj = pROC::roc(test,Score)
rocauc = rocobj$auc
rand_roc_result[id, roc_name] = rand_roc_result[id, roc_name] + rocauc
rand_nef_result[id, nef_name] = rand_nef_result[id, nef_name] + nef10
}
}
rand_roc_result[id, 2:ncol(rand_roc_result)] = rand_roc_result[id, 2:ncol(rand_roc_result)] / 25
rand_nef_result[id, 2:ncol(rand_nef_result)] = rand_nef_result[id, 2:ncol(rand_nef_result)] / 25
print(rand_roc_result[id, ])
}
View(rand_roc_result)
write.table(rand_roc_result, file = '~/RAwork/BOISE/BOISE_followup/PCBA_CV/rand_roc_results.txt',row.names = F)
write.table(rand_nef_result, file = '~/RAwork/BOISE/BOISE_followup/PCBA_CV/rand_nef_1_results.txt',row.names = F)
### Plots
library(ggplot2)
set.seed(817)
setwd('~/RAwork/BOISE/BOISE_followup/PCBA_CV/')
idxs = sample(1:102)#102
sample_size = 500
idxs = idxs[1:31]
fast_entropy_nef_results = read.table('./fast_entropy_nef_1_results.txt', sep = ' ', header=T)
rand_nef_results = read.table('./rand_nef_1_results.txt', sep = ' ', header=T)
legend_title_size = 10
legend_text_size = 10
axis_title_size = 14
axis_text_size = 13
results = data.frame('id'=idxs,'hits' = apply(dat[idxs,],1,function(x) sum(x, na.rm = T)),
rand_nef_1000 = rand_nef_results$nef_1000[idxs],
fast_nef_1000 = fast_entropy_nef_results$nef_1000[idxs])
dat = as.matrix(data.table::fread('~/Downloads/condensed_subset_PCBA128.csv.gz'),rownames=1)
dat = dat[, !colnames(dat) %in% c("rdkit SMILES","Morgan FP_2_1024","Cluster ID")]
col_name = colnames(dat)
row_name = rownames(dat)
dat = matrix(as.numeric(dat), ncol = ncol(dat))
colnames(dat) = col_name
rownames(dat) = row_name
dat = t(dat)
fast_entropy_nef_results = read.table('./fast_entropy_nef_1_results.txt', sep = ' ', header=T)
rand_nef_results = read.table('./rand_nef_1_results.txt', sep = ' ', header=T)
legend_title_size = 10
legend_text_size = 10
axis_title_size = 14
axis_text_size = 13
results = data.frame('id'=idxs,'hits' = apply(dat[idxs,],1,function(x) sum(x, na.rm = T)),
rand_nef_1000 = rand_nef_results$nef_1000[idxs],
fast_nef_1000 = fast_entropy_nef_results$nef_1000[idxs])
results$labels = rep('<100', 31)
results$labels[which(results$hits > 100 & results$hits < 500)] = rep('100~500', 11)
results$labels[which(results$hits > 500)] = rep('>500', 10)
results$labels = as.factor(results$labels)
p1 <- ggplot()+
geom_point(aes(x = rand_nef_results$nef_100[idxs], y = fast_entropy_nef_results$nef_100[idxs],color=results$labels))+
geom_abline(slope = 1, intercept = 0, color = 'red')+
scale_x_continuous('random Boise', limits = c(0.4,1))+
scale_y_continuous('fast Boise', limits = c(0.4, 1))+
labs(title = 'Scatterplot of NEF10 for nA=100', color='Hits count')
p2 <- ggplot()+
geom_point(aes(x = rand_nef_results$nef_200[idxs], y = fast_entropy_nef_results$nef_200[idxs],color=results$labels))+
geom_abline(slope = 1, intercept = 0, color = 'red')+
scale_x_continuous('random Boise', limits = c(0.4,1))+
scale_y_continuous('fast Boise', limits = c(0.4, 1))+
labs(title = 'Scatterplot of NEF10 for nA=200', color='Hits count')
p3 <- ggplot()+
geom_point(aes(x = rand_nef_results$nef_500[idxs], y = fast_entropy_nef_results$nef_500[idxs],color=results$labels))+
geom_abline(slope = 1, intercept = 0, color = 'red')+
scale_x_continuous('random Boise', limits = c(0.4,1))+
scale_y_continuous('fast Boise', limits = c(0.4, 1))+
labs(title = 'Scatterplot of NEF10 for nA=500', color='Hits count')
p4 <- ggplot()+
geom_point(aes(x = rand_nef_results$nef_1000[idxs], y = fast_entropy_nef_results$nef_1000[idxs],color=results$labels))+
geom_abline(slope = 1, intercept = 0, color = 'red')+
scale_x_continuous('random Boise', limits = c(0.4,1))+
scale_y_continuous('fast Boise', limits = c(0.4, 1))+
labs(title = 'Scatterplot of NEF10 for nA=1000', color='Hits count')
myGrobs <- list(p1,p2, p3,p4)
gridExtra::grid.arrange(grobs = myGrobs, nrow = 2,ncol = 2)
p1 <- ggplot()+
geom_point(aes(x = rand_nef_results$nef_100[idxs], y = fast_entropy_nef_results$nef_100[idxs],color=results$labels))+
geom_abline(slope = 1, intercept = 0, color = 'red')+
scale_x_continuous('random Boise', limits = c(0.4,1))+
scale_y_continuous('fast Boise', limits = c(0.4, 1))+
labs(title = 'Scatterplot of NEF1 for nA=100', color='Hits count')
p2 <- ggplot()+
geom_point(aes(x = rand_nef_results$nef_200[idxs], y = fast_entropy_nef_results$nef_200[idxs],color=results$labels))+
geom_abline(slope = 1, intercept = 0, color = 'red')+
scale_x_continuous('random Boise', limits = c(0.4,1))+
scale_y_continuous('fast Boise', limits = c(0.4, 1))+
labs(title = 'Scatterplot of NEF1 for nA=200', color='Hits count')
p3 <- ggplot()+
geom_point(aes(x = rand_nef_results$nef_500[idxs], y = fast_entropy_nef_results$nef_500[idxs],color=results$labels))+
geom_abline(slope = 1, intercept = 0, color = 'red')+
scale_x_continuous('random Boise', limits = c(0.4,1))+
scale_y_continuous('fast Boise', limits = c(0.4, 1))+
labs(title = 'Scatterplot of NEF1 for nA=500', color='Hits count')
p4 <- ggplot()+
geom_point(aes(x = rand_nef_results$nef_1000[idxs], y = fast_entropy_nef_results$nef_1000[idxs],color=results$labels))+
geom_abline(slope = 1, intercept = 0, color = 'red')+
scale_x_continuous('random Boise', limits = c(0.4,1))+
scale_y_continuous('fast Boise', limits = c(0.4, 1))+
labs(title = 'Scatterplot of NEF1 for nA=1000', color='Hits count')
myGrobs <- list(p1,p2, p3,p4)
gridExtra::grid.arrange(grobs = myGrobs, nrow = 2,ncol = 2)
length(which(fast_entropy_nef_results$nef_1000 < rand_nef_results$nef_1000))
length(which(fast_entropy_nef_results$nef_500 < rand_nef_results$nef_500))
length(which(fast_entropy_nef_results$nef_200 < rand_nef_results$nef_200))
length(which(fast_entropy_nef_results$nef_100 < rand_nef_results$nef_100))
fast_entropy_nef_results = read.table('./fast_entropy_nef_10_results.txt', sep = ' ', header=T)
rand_nef_results = read.table('./rand_nef_10_results.txt', sep = ' ', header=T)
length(which(fast_entropy_nef_results$nef_1000 < rand_nef_results$nef_1000))
length(which(fast_entropy_nef_results$nef_500 < rand_nef_results$nef_500))
length(which(fast_entropy_nef_results$nef_200 < rand_nef_results$nef_200))
length(which(fast_entropy_nef_results$nef_100 < rand_nef_results$nef_100))
set.seed(817)
setwd('~/RAwork/BOISE/BOISE_followup/PCBA_CV/')
dat = as.matrix(data.table::fread('~/Downloads/condensed_subset_PCBA128.csv.gz'),rownames=1)
dat = dat[, !colnames(dat) %in% c("rdkit SMILES","Morgan FP_2_1024","Cluster ID")]
col_name = colnames(dat)
row_name = rownames(dat)
dat = matrix(as.numeric(dat), ncol = ncol(dat))
colnames(dat) = col_name
rownames(dat) = row_name
dat = t(dat)
### overlaps with FDA
load('~/RAwork/BOISE/BOISE_followup/FDA_CV/fda_data.RData')
fda_cids = colnames(dat)
fda_cids = sapply(fda_cids, function(s){return(unlist(strsplit(s, '_'))[2])})
common_cids = intersect(fda_cids, row_name)
dat = as.matrix(data.table::fread('~/Downloads/condensed_subset_PCBA128.csv.gz'),rownames=1)
dat = dat[, !colnames(dat) %in% c("rdkit SMILES","Morgan FP_2_1024","Cluster ID")]
col_name = colnames(dat)
row_name = rownames(dat)
dat = matrix(as.numeric(dat), ncol = ncol(dat))
colnames(dat) = col_name
rownames(dat) = row_name
dat = t(dat)
### Overlaps between FDA and PCBA
fda_inform = common_cids
# fda_entropy_compar_result = data.frame('ids' = 1:102, 'roc_fda' = rep(NA, 102),'roc_entropy' = rep(NA, 102),
#                                        'nef_fda' = rep(NA, 102), 'nef_entropy' = rep(NA, 102))
fda_entropy_compar_result = read.table('~/RAwork/BOISE/BOISE_followup/PCBA_CV/fda_entropy_compar_results.txt', header = T)
View(fda_entropy_compar_result)
View(fda_entropy_compar_result)
View(fda_entropy_compar_result)
View(fda_entropy_compar_result)
View(fda_entropy_compar_result)
View(fda_entropy_compar_result)
fda_entropy_compar_result[, "nef1_entropy"] = rep(NA, 102)
fda_entropy_compar_result[, "nef1_fda"] = rep(NA, 102)
View(fda_entropy_compar_result)
dim(dat)
idxs = sample(1:102)#102
sample_size = 500
id=idxs[1]
load(paste('~/CHTC_Downloads/PCBA/pcba_orig_clust_res_', as.character(id), '.RData',sep=''))
tmp_inform_fda = which(colnames(train)%in%fda_inform)
complete_cid = colnames(dat)[which(!is.na(dat[id,]))]
complete_cid = intersect(complete_cid, fda_inform)
nA = length(complete_cid) ## valid informer size
inform_scores = rep(0, ncol(train))
for (i in 1:sample_size) {
for (j in 1:ncol(train)) {
x = train[, j]
complete_idx = which(!is.na(x))
prev_entropy = entropy(cl_sample$CC[i, complete_idx])
active_idx = which(x==1)
inactive_idx = which(x==0)
active_rate = mean(x, na.rm = T)
post_entropy = 0
if(length(active_idx) > 0){
post_entropy = post_entropy + active_rate * entropy(cl_sample$CC[i, active_idx])
}
if(length(inactive_idx) > 0){
post_entropy = post_entropy + (1-active_rate) * entropy(cl_sample$CC[i, inactive_idx])
}
mutual_info = prev_entropy - post_entropy
inform_scores[j] = inform_scores[j] + mutual_info
}
}
tmp_inform_entropy = order(inform_scores, decreasing = T)[1:nA]
a = rep(mean(train, na.rm = T), ncol(train))
b = 1 - a
## inner function for Evaluate
Score = rep(0, ncol(train))
xA = test[tmp_inform_entropy]
nA=length(tmp_inform_entropy)
print(nA)
m = ncol(train)
log_post_probs = matrix(0, 1, sample_size)
post_thetas = matrix(0, sample_size, m)
for (k in 1:sample_size){
postls = pel2_beta(P[[k]], x0=train, xA, A=tmp_inform_entropy, nT, a, b, m0)
log_post_probs[k] = postls$log_post_prob
post_thetas[k, ] = postls$post_theta
}
P = clust_sum(cl_sample,train,sample_size, a, b)
for (k in 1:sample_size){
postls = pel2_beta(P[[k]], x0=train, xA, A=tmp_inform_entropy, nT, a, b, m0)
log_post_probs[k] = postls$log_post_prob
post_thetas[k, ] = postls$post_theta
}
log_post_probs = log_post_probs - max(log_post_probs)
post_probs = exp(log_post_probs) / (sum(exp(log_post_probs)))
Score = post_probs %*% post_thetas
Score[inform[which(xA==1)]] = rep(1, sum(xA))
Score[inform[which(xA==0)]] = rep(0, nA - sum(xA))
test = as.vector(test)
Score = as.vector(Score)
Score[tmp_inform_entropy[which(xA==1)]] = rep(1, sum(xA))
Score[tmp_inform_entropy[which(xA==0)]] = rep(0, nA - sum(xA))
test = as.vector(test)
Score = as.vector(Score)
## nef
complete_cid = colnames(dat)[which(!is.na(dat[id,]))]
nTop = round(length(complete_cid) * 0.01, 0) #nef1
top = order(Score,decreasing = T)[1:nTop]
pred_hit = sum(test[top])
hit = sum(test)
maxhit = min(hit,nTop)
nef1 = ((pred_hit/nTop - hit/ncol(train)) / (maxhit/nTop - hit/ncol(train)) + 1)/2
View(fda_entropy_compar_result)
View(fda_entropy_compar_result)
fda_entropy_compar_result[id, 'nef1_entropy'] = nef1
View(fda_entropy_compar_result)
set.seed(817)
setwd('~/RAwork/BOISE/BOISE_followup/PCBA_CV/')
dat = as.matrix(data.table::fread('~/Downloads/condensed_subset_PCBA128.csv.gz'),rownames=1)
dat = dat[, !colnames(dat) %in% c("rdkit SMILES","Morgan FP_2_1024","Cluster ID")]
col_name = colnames(dat)
row_name = rownames(dat)
dat = matrix(as.numeric(dat), ncol = ncol(dat))
colnames(dat) = col_name
rownames(dat) = row_name
dat = t(dat)
### overlaps with FDA
load('~/RAwork/BOISE/BOISE_followup/FDA_CV/fda_data.RData')
fda_cids = colnames(dat)
fda_cids = sapply(fda_cids, function(s){return(unlist(strsplit(s, '_'))[2])})
common_cids = intersect(fda_cids, row_name)
dat = as.matrix(data.table::fread('~/Downloads/condensed_subset_PCBA128.csv.gz'),rownames=1)
dat = dat[, !colnames(dat) %in% c("rdkit SMILES","Morgan FP_2_1024","Cluster ID")]
col_name = colnames(dat)
row_name = rownames(dat)
dat = matrix(as.numeric(dat), ncol = ncol(dat))
colnames(dat) = col_name
rownames(dat) = row_name
dat = t(dat)
idxs = sample(1:102)#102
sample_size = 500
### Overlaps between FDA and PCBA
fda_inform = common_cids
# fda_entropy_compar_result = data.frame('ids' = 1:102, 'roc_fda' = rep(NA, 102),'roc_entropy' = rep(NA, 102),
#                                        'nef_fda' = rep(NA, 102), 'nef_entropy' = rep(NA, 102))
fda_entropy_compar_result = read.table('~/RAwork/BOISE/BOISE_followup/PCBA_CV/fda_entropy_compar_results.txt', header = T)
fda_entropy_compar_result[, "nef1_entropy"] = rep(NA, 102)
fda_entropy_compar_result[, "nef1_fda"] = rep(NA, 102)
View(fda_entropy_compar_result)
for (id in idxs[1:31]) {
load(paste('~/CHTC_Downloads/PCBA/pcba_orig_clust_res_', as.character(id), '.RData',sep=''))
if(sum(test) == 0)
next
tmp_inform_fda = which(colnames(train)%in%fda_inform)
complete_cid = colnames(dat)[which(!is.na(dat[id,]))]
complete_cid = intersect(complete_cid, fda_inform)
nA = length(complete_cid) ## valid informer size
if(nA <= 5){
print("Few informers")
next
}
inform_scores = rep(0, ncol(train))
for (i in 1:sample_size) {
for (j in 1:ncol(train)) {
x = train[, j]
complete_idx = which(!is.na(x))
prev_entropy = entropy(cl_sample$CC[i, complete_idx])
active_idx = which(x==1)
inactive_idx = which(x==0)
active_rate = mean(x, na.rm = T)
post_entropy = 0
if(length(active_idx) > 0){
post_entropy = post_entropy + active_rate * entropy(cl_sample$CC[i, active_idx])
}
if(length(inactive_idx) > 0){
post_entropy = post_entropy + (1-active_rate) * entropy(cl_sample$CC[i, inactive_idx])
}
mutual_info = prev_entropy - post_entropy
inform_scores[j] = inform_scores[j] + mutual_info
}
}
tmp_inform_entropy = order(inform_scores, decreasing = T)[1:nA]
a = rep(mean(train, na.rm = T), ncol(train))
b = 1 - a
P = clust_sum(cl_sample,train,sample_size, a, b)
## inner function for Evaluate
Score = rep(0, ncol(train))
xA = test[tmp_inform_entropy]
nA=length(tmp_inform_entropy)
print(nA)
m = ncol(train)
log_post_probs = matrix(0, 1, sample_size)
post_thetas = matrix(0, sample_size, m)
for (k in 1:sample_size){
postls = pel2_beta(P[[k]], x0=train, xA, A=tmp_inform_entropy, nT, a, b, m0)
log_post_probs[k] = postls$log_post_prob
post_thetas[k, ] = postls$post_theta
}
log_post_probs = log_post_probs - max(log_post_probs)
post_probs = exp(log_post_probs) / (sum(exp(log_post_probs)))
Score = post_probs %*% post_thetas
Score[tmp_inform_entropy[which(xA==1)]] = rep(1, sum(xA))
Score[tmp_inform_entropy[which(xA==0)]] = rep(0, nA - sum(xA))
test = as.vector(test)
Score = as.vector(Score)
## nef
complete_cid = colnames(dat)[which(!is.na(dat[id,]))]
nTop = round(length(complete_cid) * 0.01, 0) #nef1
top = order(Score,decreasing = T)[1:nTop]
pred_hit = sum(test[top])
hit = sum(test)
maxhit = min(hit,nTop)
nef1 = ((pred_hit/nTop - hit/ncol(train)) / (maxhit/nTop - hit/ncol(train)) + 1)/2
fda_entropy_compar_result[id, 'nef1_entropy'] = nef1
# nT = as.integer(ncol(train) * 0.1)
# fda_entropy_compar_result[id, 'roc_fda'] = Evaluate(cl_sample, tmp_inform_fda, 'rocauc',0.1,test,train,
#                                                    nT, sample_size, a, b, m0)
# fda_entropy_compar_result[id, 'nef_fda'] = Evaluate(cl_sample, tmp_inform_fda, 'nef',0.1,test,train,
#                                                    nT, sample_size, a, b, m0)
# fda_entropy_compar_result[id, 'roc_entropy'] = Evaluate(cl_sample, tmp_inform_entropy, 'rocauc',0.1,test,train,
#                                                     nT, sample_size, a, b, m0)
# fda_entropy_compar_result[id, 'nef_entropy'] = Evaluate(cl_sample, tmp_inform_entropy, 'nef',0.1,test,train,
#                                                     nT, sample_size, a, b, m0)
}
View(fda_entropy_compar_result)
write.table(fda_entropy_compar_result, file = '~/RAwork/BOISE/BOISE_followup/PCBA_CV/fda_entropy_compar_results.txt',row.names = F)
View(fda_entropy_compar_result)
for (id in idxs[1:31]) {
load(paste('~/CHTC_Downloads/PCBA/pcba_orig_clust_res_', as.character(id), '.RData',sep=''))
if(sum(test) == 0)
next
tmp_inform_fda = which(colnames(train)%in%fda_inform)
complete_cid = colnames(dat)[which(!is.na(dat[id,]))]
complete_cid = intersect(complete_cid, fda_inform)
nA = length(complete_cid) ## valid informer size
if(nA <= 5){
print("Few informers")
next
}
# inform_scores = rep(0, ncol(train))
# for (i in 1:sample_size) {
#   for (j in 1:ncol(train)) {
#     x = train[, j]
#     complete_idx = which(!is.na(x))
#     prev_entropy = entropy(cl_sample$CC[i, complete_idx])
#     active_idx = which(x==1)
#     inactive_idx = which(x==0)
#     active_rate = mean(x, na.rm = T)
#     post_entropy = 0
#     if(length(active_idx) > 0){
#       post_entropy = post_entropy + active_rate * entropy(cl_sample$CC[i, active_idx])
#     }
#     if(length(inactive_idx) > 0){
#       post_entropy = post_entropy + (1-active_rate) * entropy(cl_sample$CC[i, inactive_idx])
#     }
#     mutual_info = prev_entropy - post_entropy
#     inform_scores[j] = inform_scores[j] + mutual_info
#   }
# }
# tmp_inform_entropy = order(inform_scores, decreasing = T)[1:nA]
a = rep(mean(train, na.rm = T), ncol(train))
b = 1 - a
P = clust_sum(cl_sample,train,sample_size, a, b)
## inner function for Evaluate
Score = rep(0, ncol(train))
xA = test[tmp_inform_fda]
nA=length(tmp_inform_fda)
print(nA)
m = ncol(train)
log_post_probs = matrix(0, 1, sample_size)
post_thetas = matrix(0, sample_size, m)
for (k in 1:sample_size){
postls = pel2_beta(P[[k]], x0=train, xA, A=tmp_inform_fda, nT, a, b, m0)
log_post_probs[k] = postls$log_post_prob
post_thetas[k, ] = postls$post_theta
}
log_post_probs = log_post_probs - max(log_post_probs)
post_probs = exp(log_post_probs) / (sum(exp(log_post_probs)))
Score = post_probs %*% post_thetas
Score[tmp_inform_fda[which(xA==1)]] = rep(1, sum(xA))
Score[tmp_inform_fda[which(xA==0)]] = rep(0, nA - sum(xA))
test = as.vector(test)
Score = as.vector(Score)
## nef
complete_cid = colnames(dat)[which(!is.na(dat[id,]))]
nTop = round(length(complete_cid) * 0.01, 0) #nef1
top = order(Score,decreasing = T)[1:nTop]
pred_hit = sum(test[top])
hit = sum(test)
maxhit = min(hit,nTop)
nef1 = ((pred_hit/nTop - hit/ncol(train)) / (maxhit/nTop - hit/ncol(train)) + 1)/2
fda_entropy_compar_result[id, 'nef1_fda'] = nef1
# nT = as.integer(ncol(train) * 0.1)
# fda_entropy_compar_result[id, 'roc_fda'] = Evaluate(cl_sample, tmp_inform_fda, 'rocauc',0.1,test,train,
#                                                    nT, sample_size, a, b, m0)
# fda_entropy_compar_result[id, 'nef_fda'] = Evaluate(cl_sample, tmp_inform_fda, 'nef',0.1,test,train,
#                                                    nT, sample_size, a, b, m0)
# fda_entropy_compar_result[id, 'roc_entropy'] = Evaluate(cl_sample, tmp_inform_entropy, 'rocauc',0.1,test,train,
#                                                     nT, sample_size, a, b, m0)
# fda_entropy_compar_result[id, 'nef_entropy'] = Evaluate(cl_sample, tmp_inform_entropy, 'nef',0.1,test,train,
#                                                     nT, sample_size, a, b, m0)
}
View(fda_entropy_compar_result)
write.table(fda_entropy_compar_result, file = '~/RAwork/BOISE/BOISE_followup/PCBA_CV/fda_entropy_compar_results.txt',row.names = F)
### Plots
library(ggplot2)
idxs = idxs[1:31]
fda_entropy_compar_result = read.table('./fda_entropy_compar_results.txt', sep = ' ', header=T)
idxs = idxs[1:31]
View(fda_entropy_compar_result)
p1 <- ggplot()+
geom_point(aes(x = fda_entropy_compar_result$roc_fda[idxs], y = fda_entropy_compar_result$roc_entropy[idxs],color=results$labels))+
geom_abline(slope = 1, intercept = 0, color = 'red')+
scale_x_continuous('FDA & PCBA intersection', limits = c(0.4,1))+
scale_y_continuous('fast Boise', limits = c(0.4, 1))+
labs(title = 'Scatterplot of ROCAUC for FDA vs. Entropy', color='Hits count' )
p2 <- ggplot()+
geom_point(aes(x = fda_entropy_compar_result$nef1_fda[idxs], y = fda_entropy_compar_result$nef1_entropy[idxs],color=results$labels))+
geom_abline(slope = 1, intercept = 0, color = 'red')+
scale_x_continuous('FDA & PCBA intersection', limits = c(0.4,1))+
scale_y_continuous('fast Boise', limits = c(0.4, 1))+
labs(title = 'Scatterplot of NEF1 for FDA vs. Entropy', color='Hits count')
myGrobs <- list(p1,p2)
gridExtra::grid.arrange(grobs = myGrobs, nrow = 1,ncol = 2)
p1
results$labels = rep('<100', 31)
legend_title_size = 10
legend_text_size = 10
axis_title_size = 14
axis_text_size = 13
results = data.frame('id'=idxs,'hits' = apply(dat[idxs,],1,function(x) sum(x, na.rm = T)),
rand_nef_1000 = rand_nef_results$nef_1000[idxs],
fast_nef_1000 = fast_entropy_nef_results$nef_1000[idxs])
results$labels = rep('<100', 31)
results$labels[which(results$hits > 100 & results$hits < 500)] = rep('100~500', 11)
results$labels[which(results$hits > 500)] = rep('>500', 10)
results$labels = as.factor(results$labels)
p1 <- ggplot()+
geom_point(aes(x = fda_entropy_compar_result$roc_fda[idxs], y = fda_entropy_compar_result$roc_entropy[idxs],color=results$labels))+
geom_abline(slope = 1, intercept = 0, color = 'red')+
scale_x_continuous('FDA & PCBA intersection', limits = c(0.4,1))+
scale_y_continuous('fast Boise', limits = c(0.4, 1))+
labs(title = 'Scatterplot of ROCAUC for FDA vs. Entropy', color='Hits count' )
p2 <- ggplot()+
geom_point(aes(x = fda_entropy_compar_result$nef1_fda[idxs], y = fda_entropy_compar_result$nef1_entropy[idxs],color=results$labels))+
geom_abline(slope = 1, intercept = 0, color = 'red')+
scale_x_continuous('FDA & PCBA intersection', limits = c(0.4,1))+
scale_y_continuous('fast Boise', limits = c(0.4, 1))+
labs(title = 'Scatterplot of NEF1 for FDA vs. Entropy', color='Hits count')
myGrobs <- list(p1,p2)
gridExtra::grid.arrange(grobs = myGrobs, nrow = 1,ncol = 2)
fda_entropy_compar_result = read.table('./fda_entropy_compar_results.txt', sep = ' ', header=T)
idxs = idxs[1:31]
legend_title_size = 10
legend_text_size = 10
axis_title_size = 14
axis_text_size = 13
results = data.frame('id'=idxs,'hits' = apply(dat[idxs,],1,function(x) sum(x, na.rm = T)),
rand_nef_1000 = rand_nef_results$nef_1000[idxs],
fast_nef_1000 = fast_entropy_nef_results$nef_1000[idxs])
results = data.frame('id'=idxs,'hits' = apply(dat[idxs,],1,function(x) sum(x, na.rm = T)))
results$labels = rep('<100', 31)
results$labels[which(results$hits > 100 & results$hits < 500)] = rep('100~500', 11)
results$labels[which(results$hits > 500)] = rep('>500', 10)
results$labels = as.factor(results$labels)
fda_entropy_compar_result = read.table('./fda_entropy_compar_results.txt', sep = ' ', header=T)
idxs = idxs[1:31]
p1 <- ggplot()+
geom_point(aes(x = fda_entropy_compar_result$roc_fda[idxs], y = fda_entropy_compar_result$roc_entropy[idxs],color=results$labels))+
geom_abline(slope = 1, intercept = 0, color = 'red')+
scale_x_continuous('FDA & PCBA intersection', limits = c(0.4,1))+
scale_y_continuous('fast Boise', limits = c(0.4, 1))+
labs(title = 'Scatterplot of ROCAUC for FDA vs. Entropy', color='Hits count' )
p2 <- ggplot()+
geom_point(aes(x = fda_entropy_compar_result$nef1_fda[idxs], y = fda_entropy_compar_result$nef1_entropy[idxs],color=results$labels))+
geom_abline(slope = 1, intercept = 0, color = 'red')+
scale_x_continuous('FDA & PCBA intersection', limits = c(0.4,1))+
scale_y_continuous('fast Boise', limits = c(0.4, 1))+
labs(title = 'Scatterplot of NEF1 for FDA vs. Entropy', color='Hits count')
myGrobs <- list(p1,p2)
gridExtra::grid.arrange(grobs = myGrobs, nrow = 1,ncol = 2)
length(which(fda_entropy_compar_result$roc_fda< fda_entropy_compar_result$roc_entropy))
length(which(fda_entropy_compar_result$nef1_fda< fda_entropy_compar_result$nef1_entropy))
length(which(fda_entropy_compar_result$nef1_fda> fda_entropy_compar_result$nef1_entropy))
length(which(fda_entropy_compar_result$nef1_fda== fda_entropy_compar_result$nef1_entropy))
