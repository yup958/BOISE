load(paste('~/CHTC_Downloads/FDA_cv/orig_clust_res_', as.character(id), '.RData',sep=''))
# inform_scores = rep(0, ncol(train))
# for (i in 1:sample_size) {
#   for (j in 1:ncol(train)) {
#     x = train[, j]
#     complete_idx = which(!is.na(x))
#     prev_entropy = entropy(cl_sample$CC[i, complete_idx])
#     active_idx = which(x==1)
#     inactive_idx = which(x==0)
#     active_rate = mean(x, na.rm = T)
#     post_entropy = 0
#     if(length(active_idx) > 0){
#       post_entropy = post_entropy + active_rate * entropy(cl_sample$CC[i, active_idx])
#     }
#     if(length(inactive_idx) > 0){
#       post_entropy = post_entropy + (1-active_rate) * entropy(cl_sample$CC[i, inactive_idx])
#     }
#     mutual_info = prev_entropy - post_entropy
#     inform_scores[j] = inform_scores[j] + mutual_info
#   }
# }
inform_scores = orig_scores[which(orig_scores$testid == id),'score']
nT = as.integer(ncol(train) * 0.1)
nAs = (11:20) * 10
for (nA in nAs) {
# inform = order(inform_scores, decreasing = T)[1:nA]
inform = order(inform_scores)[1:nA]
roc_name = paste('roc_', as.character(nA), sep = '')
nef_name = paste('nef_', as.character(nA), sep = '')
a = rep(mean(train, na.rm = T), ncol(train))
b = 1 - a
baseline_roc[id, roc_name] = Evaluate(cl_sample, inform, 'rocauc', 0.1, test, train, nT,sample_size,a,b,m0)
baseline_nef[id, nef_name] = Evaluate(cl_sample, inform, 'nef', 0.1, test, train, nT,sample_size,a,b,m0)
}
}
write.table(baseline_roc, file = 'fast_info_1_roc_results.txt',row.names = F)
write.table(baseline_nef, file = 'fast_info_1_nef_results.txt',row.names = F)
summary(baseline_roc$roc_200)
summary(baseline_nef$nef_200)
results = data.frame('Informer_size' = (1:20)*10)
cols = c(11, 21:39)
roc_results = read.table('fast_roc_results.txt', sep = ' ', header=T)[-58,]
results[,'fast_entropy'] = apply(roc_results, 2,function(x){return(mean(x, na.rm = T))})[cols]
roc_results = read.table('fast_info_1_roc_results.txt', sep = ' ', header=T)[-58,]
results[,'fast_pel1'] = apply(roc_results, 2,function(x){return(mean(x, na.rm = T))})[cols]
View(results)
nef_results = read.table('fast_nef_results.txt', sep = ' ', header=T)[-58,]
results[,'fast_entropy'] = apply(nef_results, 2,function(x){return(mean(x, na.rm = T))})[cols]
nef_results = read.table('fast_info_1_nef_results.txt', sep = ' ', header=T)[-58,]
results[,'fast_pel1'] = apply(nef_results, 2,function(x){return(mean(x, na.rm = T))})[cols]
View(results)
## for block clustering
baseline_roc = read.table('./results/chem_fast_roc_results.txt', header = T)
baseline_nef = read.table('./results/chem_fast_nef_results.txt', header = T)
for (id in 1:60) {
load(paste('~/CHTC_Downloads/FDA_cv/testid_', as.character(id), '_block.RData',sep=''))
inform_scores = rep(0, ncol(train))
for (cpd in 1:ncol(train)) {
grp = cl$C[cpd]
sub_cols = which(cl$C == grp)
sub_train = train[ , sub_cols]
for (i in 1:sample_size) {
x = train[, cpd]
complete_idx = which(!is.na(x))
prev_entropy = entropy(block[[grp]][i, complete_idx])
active_idx = which(x==1)
inactive_idx = which(x==0)
active_rate = mean(x, na.rm = T)
post_entropy = 0
if(length(active_idx) > 0){
post_entropy = post_entropy + active_rate * entropy(block[[grp]][i, active_idx])
}
if(length(inactive_idx) > 0){
post_entropy = post_entropy + (1-active_rate) * entropy(block[[grp]][i, inactive_idx])
}
mutual_info = prev_entropy - post_entropy
inform_scores[cpd] = inform_scores[cpd] + mutual_info
}
}
# inform_scores = chem_scores[which(chem_scores$testid == id),'score']
# Evaluate
nT = as.integer(ncol(train) * 0.1)
nAs = (11:20) * 10
for (nA in nAs) {
inform = order(inform_scores, decreasing = T)[1:nA]
#inform = order(inform_scores)[1:nA]
roc_name = paste('roc_', as.character(nA), sep = '')
nef_name = paste('nef_', as.character(nA), sep = '')
Scores = evaluate_interm(cl, inform, train, test, m0s, block, sample_size)
xA = test[inform]
Scores[inform[which(xA==1)]] = rep(1, sum(xA))
Scores[inform[which(xA==0)]] = rep(0, sum(1-xA))
## ROCAUC
Response = as.vector(test)
Scores = as.vector(Scores)
rocobj = pROC::roc(response = Response, predictor = Scores, quiet = TRUE)
rocauc = rocobj$auc
baseline_roc[id, roc_name] = rocauc
## NEF
nT = as.integer(ncol(train) * 0.1)
top = order(Scores,decreasing = T)[1:nT]
pred_hit = sum(test[top])
hit = sum(test)
maxhit = min(hit,nT)
nef10 = ((pred_hit/nT - hit/length(test)) / (maxhit/nT - hit/length(test)) + 1)/2
baseline_nef[id, nef_name] = nef10
}
}
summary(baseline_roc$roc_200)
summary(baseline_nef$nef_200)
View(results)
write.table(baseline_roc, file = './results/chem_fast_roc_results.txt',row.names = F)
write.table(baseline_nef, file = './results/chem_fast_nef_results.txt',row.names = F)
setwd('~/RAwork/BOISE/BOISE_followup/FDA_CV/')
set.seed(817)
source('chem_evaluate.R')
sample_size = 100
chem_scores = read.table('~/CHTC_Downloads/FDA_cv/chem_scores.txt', header = F)
colnames(chem_scores) = c('testid', 'chemid', 'score')
## for block clustering
baseline_roc = read.table('./results/chem_fast_info_1_roc_results.txt', header = T)
baseline_nef = read.table('./results/chem_fast_info_1_nef_results.txt', header = T)
for (id in 1:60) {
load(paste('~/CHTC_Downloads/FDA_cv/testid_', as.character(id), '_block.RData',sep=''))
# inform_scores = rep(0, ncol(train))
# for (cpd in 1:ncol(train)) {
#   grp = cl$C[cpd]
#   sub_cols = which(cl$C == grp)
#   sub_train = train[ , sub_cols]
#   for (i in 1:sample_size) {
#     x = train[, cpd]
#     complete_idx = which(!is.na(x))
#     prev_entropy = entropy(block[[grp]][i, complete_idx])
#     active_idx = which(x==1)
#     inactive_idx = which(x==0)
#     active_rate = mean(x, na.rm = T)
#     post_entropy = 0
#     if(length(active_idx) > 0){
#       post_entropy = post_entropy + active_rate * entropy(block[[grp]][i, active_idx])
#     }
#     if(length(inactive_idx) > 0){
#       post_entropy = post_entropy + (1-active_rate) * entropy(block[[grp]][i, inactive_idx])
#     }
#     mutual_info = prev_entropy - post_entropy
#     inform_scores[cpd] = inform_scores[cpd] + mutual_info
#   }
# }
inform_scores = chem_scores[which(chem_scores$testid == id),'score']
# Evaluate
nT = as.integer(ncol(train) * 0.1)
nAs = (11:20) * 10
for (nA in nAs) {
# inform = order(inform_scores, decreasing = T)[1:nA]
inform = order(inform_scores)[1:nA]
roc_name = paste('roc_', as.character(nA), sep = '')
nef_name = paste('nef_', as.character(nA), sep = '')
Scores = evaluate_interm(cl, inform, train, test, m0s, block, sample_size)
xA = test[inform]
Scores[inform[which(xA==1)]] = rep(1, sum(xA))
Scores[inform[which(xA==0)]] = rep(0, sum(1-xA))
## ROCAUC
Response = as.vector(test)
Scores = as.vector(Scores)
rocobj = pROC::roc(response = Response, predictor = Scores, quiet = TRUE)
rocauc = rocobj$auc
baseline_roc[id, roc_name] = rocauc
## NEF
nT = as.integer(ncol(train) * 0.1)
top = order(Scores,decreasing = T)[1:nT]
pred_hit = sum(test[top])
hit = sum(test)
maxhit = min(hit,nT)
nef10 = ((pred_hit/nT - hit/length(test)) / (maxhit/nT - hit/length(test)) + 1)/2
baseline_nef[id, nef_name] = nef10
}
}
summary(baseline_roc$roc_200)
summary(baseline_nef$nef_200)
write.table(baseline_roc, file = './results/chem_fast_info_1_roc_results.txt',row.names = F)
write.table(baseline_nef, file = './results/chem_fast_info_1_nef_results.txt',row.names = F)
setwd('~/RAwork/BOISE/BOISE_followup/FDA_CV/')
set.seed(817)
setwd('~/RAwork/BOISE/BOISE_followup/FDA_CV/')
set.seed(817)
# for random informer set
baseline_roc = read.table('./results/rdinfo_roc_results.txt', header = T)
baseline_nef = read.table('./results/rdinfo_nef_results.txt', header = T)
iter = 25
sample_size = 100
for (id in 1:60) {
print(id)
load(paste('~/CHTC_Downloads/FDA_cv/orig_clust_res_', as.character(id), '.RData',sep=''))
ncpd = ncol(train)
a = rep(mean(train, na.rm = T), ncol(train))
b = 1 - a
nT = as.integer(ncol(train) * 0.1)
for (nA in (11:20)*10) {
roc_name = paste('roc_', as.character(nA), sep = '')
nef_name = paste('nef_', as.character(nA), sep = '')
roc = 0
nef = 0
for (i in 1:iter) {
inform = sample(1:ncpd, nA)
roc = roc + Evaluate(cl_sample, inform, 'rocauc', 0.1, test, train, nT,sample_size,a,b,m0)
nef = nef + Evaluate(cl_sample, inform, 'nef', 0.1, test, train, nT,sample_size,a,b,m0)
}
roc = roc / iter
nef = nef / iter
baseline_roc[id, roc_name] = roc
baseline_nef[id, nef_name] = nef
}
}
summary(baseline_roc$roc_200)
summary(baseline_nef$nef_200)
write.table(baseline_roc, file = './results/rdinfo_roc_results.txt',row.names = F)
write.table(baseline_nef, file = './results/rdinfo_nef_results.txt',row.names = F)
setwd('~/RAwork/BOISE/BOISE_followup/FDA_CV/')
source('chem_evaluate.R')
set.seed(817)
baseline_roc = read.table('./results/chem_rdinfo_roc_results.txt', header = T)
baseline_nef = read.table('./results/chem_rdinfo_nef_results.txt', header = T)
iter = 25
row_sample_size = 100
for (id in 1:60) {
print(id)
load(paste('~/CHTC_Downloads/FDA_cv/testid_', as.character(id), '_block.RData',sep=''))
ncpd = ncol(train)
a = rep(mean(train, na.rm = T), ncol(train))
b = 1 - a
nT = as.integer(ncol(train) * 0.1)
for (nA in (11:20)*10) {
roc_name = paste('roc_', as.character(nA), sep = '')
nef_name = paste('nef_', as.character(nA), sep = '')
roc = 0
nef = 0
for (i in 1:iter) {
inform = sample(1:ncpd, nA)
Scores = evaluate_interm(cl, inform, train, test, m0s, block, row_sample_size)
xA = test[inform]
Scores[inform[which(xA==1)]] = rep(1, sum(xA))
Scores[inform[which(xA==0)]] = rep(0, sum(1-xA))
## ROCAUC
Response = as.vector(test)
Scores = as.vector(Scores)
rocobj = pROC::roc(response = Response, predictor = Scores, quiet = TRUE)
tmp_roc = rocobj$auc
## NEF10
nT = as.integer(ncol(train) * 0.1)
top = order(Scores,decreasing = T)[1:nT]
pred_hit = sum(test[top])
hit = sum(test)
maxhit = min(hit,nT)
tmp_nef = ((pred_hit/nT - hit/length(test)) / (maxhit/nT - hit/length(test)) + 1)/2
roc = roc + tmp_roc
nef = nef + tmp_nef
}
roc = roc / iter
nef = nef / iter
baseline_roc[id, roc_name] = roc
baseline_nef[id, nef_name] = nef
}
}
summary(baseline_nef$nef_200)
summary(baseline_roc$roc_200)
write.table(baseline_roc, file = './results/chem_rdinfo_roc_results.txt',row.names = F)
write.table(baseline_nef, file = './results/chem_rdinfo_nef_results.txt',row.names = F)
setwd('~/RAwork/BOISE/BOISE_followup/FDA_CV/')
set.seed(817)
### Plots
library(ggplot2)
results = data.frame('Informer_size' = (1:20)*10)
cols = c(11, 21:39)
roc_results = read.table('fast_roc_results.txt', sep = ' ', header=T)[-58,]
results[,'fast_entropy'] = apply(roc_results, 2,function(x){return(mean(x, na.rm = T))})[cols]
roc_results = read.table('fast_info_1_roc_results.txt', sep = ' ', header=T)[-58,]
results[,'fast_pel1'] = apply(roc_results, 2,function(x){return(mean(x, na.rm = T))})[cols]
roc_results = read.table('./results/rdinfo_roc_results.txt', sep = ' ', header=T)[-58,]
results[,'Boise_rand'] = apply(roc_results, 2,function(x){return(mean(x, na.rm = T))})[cols]
View(results)
nef_results = read.table('fast_nef_results.txt', sep = ' ', header=T)[-58,]
results[,'fast_entropy'] = apply(nef_results, 2,function(x){return(mean(x, na.rm = T))})[cols]
nef_results = read.table('fast_info_1_nef_results.txt', sep = ' ', header=T)[-58,]
results[,'fast_pel1'] = apply(nef_results, 2,function(x){return(mean(x, na.rm = T))})[cols]
nef_results = read.table('./results/rdinfo_nef_results.txt', sep = ' ', header=T)[-58,]
results[,'Boise_rand'] = apply(nef_results, 2,function(x){return(mean(x, na.rm = T))})[cols]
View(results)
p2 <- ggplot(results)+
geom_point(mapping = aes(x = Informer_size, y = fast_pel1))+
geom_line(mapping = aes(x = Informer_size, y = fast_pel1, color = 'fast_pel1'))+
geom_point(mapping = aes(x = Informer_size, y = fast_entropy))+
geom_line(mapping = aes(x = Informer_size, y = fast_entropy, color = 'fast_entropy'))+
geom_point(mapping = aes(x = Informer_size, y = Boise_rand))+
geom_line(mapping = aes(x = Informer_size, y = Boise_rand, color = 'rand_Boise'))+
scale_color_manual(name = "Methods", values = c("rand_Boise" = "red",
'fast_entropy' = 'darkblue',
'fast_pel1' = 'purple'))+
scale_x_continuous('Informer sizes', breaks = seq(10,200, by=10))+
#scale_y_continuous('ROCAUC mean', limits = c(0.806, 0.907))+
scale_y_continuous('NEF mean', limits = c(0.692, 0.918))+
#labs(title = "Clustering on whole matrix")+
theme(axis.title = element_text(size = axis_title_size),
axis.text = element_text(size = axis_text_size),
legend.title = element_text(size = legend_title_size),
legend.text = element_text(size = legend_text_size),
#legend.position = c(0.85,0.25),
legend.position = c(0.85, 0.25))
legend_title_size = 10
legend_text_size = 10
axis_title_size = 14
axis_text_size = 13
p2 <- ggplot(results)+
geom_point(mapping = aes(x = Informer_size, y = fast_pel1))+
geom_line(mapping = aes(x = Informer_size, y = fast_pel1, color = 'fast_pel1'))+
geom_point(mapping = aes(x = Informer_size, y = fast_entropy))+
geom_line(mapping = aes(x = Informer_size, y = fast_entropy, color = 'fast_entropy'))+
geom_point(mapping = aes(x = Informer_size, y = Boise_rand))+
geom_line(mapping = aes(x = Informer_size, y = Boise_rand, color = 'rand_Boise'))+
scale_color_manual(name = "Methods", values = c("rand_Boise" = "red",
'fast_entropy' = 'darkblue',
'fast_pel1' = 'purple'))+
scale_x_continuous('Informer sizes', breaks = seq(10,200, by=10))+
#scale_y_continuous('ROCAUC mean', limits = c(0.806, 0.907))+
scale_y_continuous('NEF mean', limits = c(0.692, 0.918))+
#labs(title = "Clustering on whole matrix")+
theme(axis.title = element_text(size = axis_title_size),
axis.text = element_text(size = axis_text_size),
legend.title = element_text(size = legend_title_size),
legend.text = element_text(size = legend_text_size),
#legend.position = c(0.85,0.25),
legend.position = c(0.85, 0.25))
p2
roc_results = read.table('fast_roc_results.txt', sep = ' ', header=T)[-58,]
results[,'fast_entropy'] = apply(roc_results, 2,function(x){return(mean(x, na.rm = T))})[cols]
roc_results = read.table('fast_info_1_roc_results.txt', sep = ' ', header=T)[-58,]
results[,'fast_pel1'] = apply(roc_results, 2,function(x){return(mean(x, na.rm = T))})[cols]
roc_results = read.table('./results/rdinfo_roc_results.txt', sep = ' ', header=T)[-58,]
results[,'Boise_rand'] = apply(roc_results, 2,function(x){return(mean(x, na.rm = T))})[cols]
p1 <- ggplot(results)+
geom_point(mapping = aes(x = Informer_size, y = fast_pel1))+
geom_line(mapping = aes(x = Informer_size, y = fast_pel1, color = 'fast_pel1'))+
geom_point(mapping = aes(x = Informer_size, y = fast_entropy))+
geom_line(mapping = aes(x = Informer_size, y = fast_entropy, color = 'fast_entropy'))+
geom_point(mapping = aes(x = Informer_size, y = Boise_rand))+
geom_line(mapping = aes(x = Informer_size, y = Boise_rand, color = 'rand_Boise'))+
scale_color_manual(name = "Methods", values = c("rand_Boise" = "red",
'fast_entropy' = 'darkblue',
'fast_pel1' = 'purple'))+
scale_x_continuous('Informer sizes', breaks = seq(10,200, by=10))+
scale_y_continuous('ROCAUC mean', limits = c(0.806, 0.945))+
#scale_y_continuous('NEF mean', limits = c(0.692, 0.918))+
labs(title = "Clustering on whole matrix")+
theme(axis.title = element_text(size = axis_title_size),
axis.text = element_text(size = axis_text_size),
legend.title = element_text(size = legend_title_size),
legend.text = element_text(size = legend_text_size),
#legend.position = c(0.85,0.25),
legend.position = c(0.85, 0.25))
results = data.frame('Informer_size' = (1:20)*10)
roc_results = read.table('./results/chem_fast_roc_results.txt', sep = ' ', header=T)[-58,]
View(nef_results)
cols = c(11, 21, 31:48)
roc_results = read.table('./results/chem_fast_roc_results.txt', sep = ' ', header=T)[-58,]
results[,'fast_entropy'] = apply(roc_results, 2,function(x){return(mean(x, na.rm = T))})[cols]
roc_results = read.table('./results/chem_fast_info_1_roc_results.txt', sep = ' ', header=T)[-58,]
results[,'fast_pel1'] = apply(roc_results, 2,function(x){return(mean(x, na.rm = T))})[cols]
roc_results = read.table('./results/chem_rdinfo_roc_results.txt', sep = ' ', header=T)[-58,]
results[,'Boise_rand'] = apply(roc_results, 2,function(x){return(mean(x, na.rm = T))})[cols]
View(roc_results)
View(results)
results = data.frame('Informer_size' = (1:20)*10)
cols = c(11, 21:39)
roc_results = read.table('fast_roc_results.txt', sep = ' ', header=T)[-58,]
results[,'fast_entropy'] = apply(roc_results, 2,function(x){return(mean(x, na.rm = T))})[cols]
roc_results = read.table('fast_info_1_roc_results.txt', sep = ' ', header=T)[-58,]
results[,'fast_pel1'] = apply(roc_results, 2,function(x){return(mean(x, na.rm = T))})[cols]
roc_results = read.table('./results/rdinfo_roc_results.txt', sep = ' ', header=T)[-58,]
results[,'Boise_rand'] = apply(roc_results, 2,function(x){return(mean(x, na.rm = T))})[cols]
p1 <- ggplot(results)+
geom_point(mapping = aes(x = Informer_size, y = fast_pel1))+
geom_line(mapping = aes(x = Informer_size, y = fast_pel1, color = 'fast_pel1'))+
geom_point(mapping = aes(x = Informer_size, y = fast_entropy))+
geom_line(mapping = aes(x = Informer_size, y = fast_entropy, color = 'fast_entropy'))+
geom_point(mapping = aes(x = Informer_size, y = Boise_rand))+
geom_line(mapping = aes(x = Informer_size, y = Boise_rand, color = 'rand_Boise'))+
scale_color_manual(name = "Methods", values = c("rand_Boise" = "red",
'fast_entropy' = 'darkblue',
'fast_pel1' = 'purple'))+
scale_x_continuous('Informer sizes', breaks = seq(10,200, by=10))+
scale_y_continuous('ROCAUC mean', limits = c(0.806, 0.950))+
#scale_y_continuous('NEF mean', limits = c(0.692, 0.918))+
labs(title = "Clustering on whole matrix")+
theme(axis.title = element_text(size = axis_title_size),
axis.text = element_text(size = axis_text_size),
legend.title = element_text(size = legend_title_size),
legend.text = element_text(size = legend_text_size),
#legend.position = c(0.85,0.25),
legend.position = c(0.85, 0.25))
p1
results = data.frame('Informer_size' = (1:20)*10)
cols = c(11, 21:39)
roc_results = read.table('fast_roc_results.txt', sep = ' ', header=T)[-58,]
results[,'fast_entropy'] = apply(roc_results, 2,function(x){return(mean(x, na.rm = T))})[cols]
roc_results = read.table('fast_info_1_roc_results.txt', sep = ' ', header=T)[-58,]
results[,'fast_pel1'] = apply(roc_results, 2,function(x){return(mean(x, na.rm = T))})[cols]
roc_results = read.table('./results/rdinfo_roc_results.txt', sep = ' ', header=T)[-58,]
results[,'Boise_rand'] = apply(roc_results, 2,function(x){return(mean(x, na.rm = T))})[cols]
p1 <- ggplot(results)+
geom_point(mapping = aes(x = Informer_size, y = fast_pel1))+
geom_line(mapping = aes(x = Informer_size, y = fast_pel1, color = 'fast_pel1'))+
geom_point(mapping = aes(x = Informer_size, y = fast_entropy))+
geom_line(mapping = aes(x = Informer_size, y = fast_entropy, color = 'fast_entropy'))+
geom_point(mapping = aes(x = Informer_size, y = Boise_rand))+
geom_line(mapping = aes(x = Informer_size, y = Boise_rand, color = 'rand_Boise'))+
scale_color_manual(name = "Methods", values = c("rand_Boise" = "red",
'fast_entropy' = 'darkblue',
'fast_pel1' = 'purple'))+
scale_x_continuous('Informer sizes', breaks = seq(10,200, by=10))+
scale_y_continuous('ROCAUC mean', limits = c(0.806, 0.950))+
#scale_y_continuous('NEF mean', limits = c(0.692, 0.918))+
labs(title = "Clustering on whole matrix")+
theme(axis.title = element_text(size = axis_title_size),
axis.text = element_text(size = axis_text_size),
legend.title = element_text(size = legend_title_size),
legend.text = element_text(size = legend_text_size),
#legend.position = c(0.85,0.25),
legend.position = c(0.85, 0.25))
p1
p2
results = data.frame('Informer_size' = (1:20)*10)
cols = c(11, 21, 31:48)
roc_results = read.table('./results/chem_fast_roc_results.txt', sep = ' ', header=T)[-58,]
results[,'fast_entropy'] = apply(roc_results, 2,function(x){return(mean(x, na.rm = T))})[cols]
roc_results = read.table('./results/chem_fast_info_1_roc_results.txt', sep = ' ', header=T)[-58,]
results[,'fast_pel1'] = apply(roc_results, 2,function(x){return(mean(x, na.rm = T))})[cols]
roc_results = read.table('./results/chem_rdinfo_roc_results.txt', sep = ' ', header=T)[-58,]
results[,'Boise_rand'] = apply(roc_results, 2,function(x){return(mean(x, na.rm = T))})[cols]
nef_results = read.table('./results/chem_fast_nef_results.txt', sep = ' ', header=T)[-58,]
results[,'fast_entropy'] = apply(nef_results, 2,function(x){return(mean(x, na.rm = T))})[cols]
nef_results = read.table('./results/chem_fast_info_1_nef_results.txt', sep = ' ', header=T)[-58,]
results[,'fast_pel1'] = apply(nef_results, 2,function(x){return(mean(x, na.rm = T))})[cols]
nef_results = read.table('./results/chem_rdinfo_nef_results.txt', sep = ' ', header=T)[-58,]
results[,'Boise_rand'] = apply(nef_results, 2,function(x){return(mean(x, na.rm = T))})[cols]
View(results)
p4 <- ggplot(results)+
geom_point(mapping = aes(x = Informer_size, y = Boise_rand))+
geom_line(mapping = aes(x = Informer_size, y = Boise_rand, color = 'rand_Boise'))+
geom_point(mapping = aes(x = Informer_size, y = fast_entropy))+
geom_line(mapping = aes(x = Informer_size, y = fast_entropy, color = 'fast_entropy'))+
geom_point(mapping = aes(x = Informer_size, y = fast_pel1))+
geom_line(mapping = aes(x = Informer_size, y = fast_pel1, color = 'fast_pel1'))+
scale_color_manual(name = "Methods", values = c("rand_Boise" = "red",
'fast_entropy' = 'darkblue',
'fast_pel1' = 'purple'))+
scale_x_continuous('Informer sizes', breaks = seq(10,100, by=10))+
#scale_y_continuous('ROCAUC mean', limits = c(0.806, 0.907))+
scale_y_continuous('NEF mean', limits = c(0.692, 0.918))+
#labs(title = "Clustering on separate matrices")+
theme(axis.title = element_text(size = axis_title_size),
axis.text = element_text(size = axis_text_size),
legend.title = element_text(size = legend_title_size),
legend.text = element_text(size = legend_text_size),
#legend.position = c(0.85,0.2),
legend.position = c(0.85,0.2))
p4 <- ggplot(results)+
geom_point(mapping = aes(x = Informer_size, y = Boise_rand))+
geom_line(mapping = aes(x = Informer_size, y = Boise_rand, color = 'rand_Boise'))+
geom_point(mapping = aes(x = Informer_size, y = fast_entropy))+
geom_line(mapping = aes(x = Informer_size, y = fast_entropy, color = 'fast_entropy'))+
geom_point(mapping = aes(x = Informer_size, y = fast_pel1))+
geom_line(mapping = aes(x = Informer_size, y = fast_pel1, color = 'fast_pel1'))+
scale_color_manual(name = "Methods", values = c("rand_Boise" = "red",
'fast_entropy' = 'darkblue',
'fast_pel1' = 'purple'))+
scale_x_continuous('Informer sizes', breaks = seq(10,200, by=10))+
#scale_y_continuous('ROCAUC mean', limits = c(0.806, 0.907))+
scale_y_continuous('NEF mean', limits = c(0.692, 0.918))+
#labs(title = "Clustering on separate matrices")+
theme(axis.title = element_text(size = axis_title_size),
axis.text = element_text(size = axis_text_size),
legend.title = element_text(size = legend_title_size),
legend.text = element_text(size = legend_text_size),
#legend.position = c(0.85,0.2),
legend.position = c(0.85,0.2))
p4
roc_results = read.table('./results/chem_fast_roc_results.txt', sep = ' ', header=T)[-58,]
results[,'fast_entropy'] = apply(roc_results, 2,function(x){return(mean(x, na.rm = T))})[cols]
roc_results = read.table('./results/chem_fast_info_1_roc_results.txt', sep = ' ', header=T)[-58,]
results[,'fast_pel1'] = apply(roc_results, 2,function(x){return(mean(x, na.rm = T))})[cols]
roc_results = read.table('./results/chem_rdinfo_roc_results.txt', sep = ' ', header=T)[-58,]
results[,'Boise_rand'] = apply(roc_results, 2,function(x){return(mean(x, na.rm = T))})[cols]
p3 <- ggplot(results)+
geom_point(mapping = aes(x = Informer_size, y = Boise_rand))+
geom_line(mapping = aes(x = Informer_size, y = Boise_rand, color = 'rand_Boise'))+
geom_point(mapping = aes(x = Informer_size, y = fast_entropy))+
geom_line(mapping = aes(x = Informer_size, y = fast_entropy, color = 'fast_entropy'))+
geom_point(mapping = aes(x = Informer_size, y = fast_pel1))+
geom_line(mapping = aes(x = Informer_size, y = fast_pel1, color = 'fast_pel1'))+
scale_color_manual(name = "Methods", values = c("rand_Boise" = "red",
'fast_entropy' = 'darkblue',
'fast_pel1' = 'purple'))+
scale_x_continuous('Informer sizes', breaks = seq(10,200, by=10))+
scale_y_continuous('ROCAUC mean', limits = c(0.806, 0.950))+
#scale_y_continuous('NEF mean', limits = c(0.692, 0.918))+
labs(title = "Clustering on separate matrices")+
theme(axis.title = element_text(size = axis_title_size),
axis.text = element_text(size = axis_text_size),
legend.title = element_text(size = legend_title_size),
legend.text = element_text(size = legend_text_size),
#legend.position = c(0.85,0.2),
legend.position = c(0.85,0.2))
myGrobs <- list(p1,p3,p2,p4)
gridExtra::grid.arrange(grobs = myGrobs, nrow = 2,ncol = 2)
