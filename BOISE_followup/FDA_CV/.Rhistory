### Approximate calculation for k in (nu+1):infty
constant_term = rho * gamma(rho+1) / gamma(2-2*theta) ## constant
zeta_sum = VGAM::zeta(x = 1+rho+2*theta, shift = nu+1)
pm = pm - constant_term * zeta_sum
return(pm)
}
### P(N|M)
pN_gM <- function(n, rho, theta){
if(n == 1){
return(-Inf) ### not possible as we assume no division no mutation
} else{
lpn = log_pN(n, rho) ## P(N)
lpmgn = log_pM_gN(n, theta)
return(exp(lpn+lpmgn))
}
}
nrange = 1e7
plot_range = 1e5
rho = 0.1
theta = 1e-5
nu = 1e7
axis_title_size = 16
axis_text_size = 15
legend_title_size = 13
legend_text_size = 13
### Pure birth model
sampled = data.frame(proposed = 2:nrange)
### more plots
nrange = 1e7
plot_range = 1e5
intersect = data.frame(rho = rep(c(0.1,0.15,0.2), 3), theta = c(rep(1e-4, 3), rep(1e-5, 3), rep(1e-6, 3)))
## p1: rho = 0.1, mutate = 1e-4
rho = 0.1
theta = 1e-4
sampled = data.frame(proposed = 2:nrange)
sampled$pn = unlist(lapply(sampled$proposed, FUN = function(k){
return(exp(log_pN(k, rho)))
}))
sampled$pngm = unlist(lapply(sampled$proposed, FUN = function(k){
return(pN_gM(k, rho, theta))
}))
pm = pM_approx(nu = nu, theta = theta, rho = rho)
sampled$pngm = sampled$pngm / pm
sampled$diff = abs(log(sampled$pngm) - log(sampled$pn))
intersect$close[1] = sampled$proposed[which(sampled$diff == min(sampled$diff))]
p1 = ggplot(sampled[1:plot_range, ])+
geom_point(aes(x = log10(proposed), y = log10(pn), color = 'N'), size = 0.4)+
geom_line(aes(x = log10(proposed), y = log10(pn), color = 'N'), linetype = 2, size=0.2)+
geom_point(aes(x = log10(proposed), y = log10(pngm), color = 'N|M=1'), size = 0.4)+
geom_line(aes(x = log10(proposed), y = log10(pngm), color = 'N|M=1'), linetype = 2, size=0.2)+
scale_color_manual(name = "Prob. mass", values = c("N" = "darkblue", "N|M=1" = "red"))+
labs( x= 'log10(N)', y = 'log10(Prob. mass)', title = '\u03c1=0.1; \u03b8=0.0001')+
theme(axis.title = element_text(size = axis_title_size),
axis.text = element_text(size = axis_text_size),
legend.title = element_text(size = legend_title_size),
legend.text = element_text(size = legend_text_size),
legend.position = c(0.8,0.8))
p1
## p2: rho = 0.15, mutate = 1e-4
rho = 0.15
theta = 1e-4
sampled$pn = unlist(lapply(sampled$proposed, FUN = function(k){
return(exp(log_pN(k, rho)))
}))
sampled$pngm = unlist(lapply(sampled$proposed, FUN = function(k){
return(pN_gM(k, rho, theta))
}))
pm = pM_approx(nu = nu, theta = theta, rho = rho)
sampled$pngm = sampled$pngm / pm
sampled$diff = abs(log(sampled$pngm) - log(sampled$pn))
intersect$close[2] = sampled$proposed[which(sampled$diff == min(sampled$diff))]
### more plots
nrange = 1e7
plot_range = 1e5
intersect = data.frame(rho = rep(c(0.1,0.15,0.2), 3), theta = c(rep(1e-4, 3), rep(1e-5, 3), rep(1e-6, 3)))
## p1: rho = 0.1, mutate = 1e-4
rho = 0.1
theta = 1e-4
sampled = data.frame(proposed = 2:nrange)
sampled$pn = unlist(lapply(sampled$proposed, FUN = function(k){
return(exp(log_pN(k, rho)))
}))
sampled$pngm = unlist(lapply(sampled$proposed, FUN = function(k){
return(pN_gM(k, rho, theta))
}))
pm = pM_approx(nu = nu, theta = theta, rho = rho)
sampled$pngm = sampled$pngm / pm
sampled$diff = abs(log(sampled$pngm) - log(sampled$pn))
intersect$close[1] = sampled$proposed[which(sampled$diff == min(sampled$diff))]
p1 = ggplot(sampled[1:plot_range, ])+
geom_point(aes(x = log10(proposed), y = log10(pn), color = 'N'), size = 0.4)+
geom_line(aes(x = log10(proposed), y = log10(pn), color = 'N'), linetype = 2, size=0.2)+
geom_point(aes(x = log10(proposed), y = log10(pngm), color = 'N|M=1'), size = 0.4)+
geom_line(aes(x = log10(proposed), y = log10(pngm), color = 'N|M=1'), linetype = 2, size=0.2)+
scale_color_manual(name = "Prob. mass", values = c("N" = "darkblue", "N|M=1" = "red"))+
labs( x= 'log10(N)', y = 'log10(Prob. mass)', title = '\u03c1=0.1; \u03b8=1e-4')+
theme(axis.title = element_text(size = axis_title_size),
axis.text = element_text(size = axis_text_size),
legend.title = element_text(size = legend_title_size),
legend.text = element_text(size = legend_text_size),
legend.position = c(0.8,0.8))
p1
## p2: rho = 0.15, mutate = 1e-4
rho = 0.15
theta = 1e-4
sampled$pn = unlist(lapply(sampled$proposed, FUN = function(k){
return(exp(log_pN(k, rho)))
}))
sampled$pngm = unlist(lapply(sampled$proposed, FUN = function(k){
return(pN_gM(k, rho, theta))
}))
pm = pM_approx(nu = nu, theta = theta, rho = rho)
sampled$pngm = sampled$pngm / pm
sampled$diff = abs(log(sampled$pngm) - log(sampled$pn))
intersect$close[2] = sampled$proposed[which(sampled$diff == min(sampled$diff))]
p2 = ggplot(sampled[1:plot_range, ])+
geom_point(aes(x = log10(proposed), y = log10(pn), color = 'N'), size = 0.4)+
geom_line(aes(x = log10(proposed), y = log10(pn), color = 'N'), linetype = 2, size=0.2)+
geom_point(aes(x = log10(proposed), y = log10(pngm), color = 'N|M=1'), size = 0.4)+
geom_line(aes(x = log10(proposed), y = log10(pngm), color = 'N|M=1'), linetype = 2, size=0.2)+
scale_color_manual(name = "Prob. mass", values = c("N" = "darkblue", "N|M=1" = "red"))+
labs( x= 'log10(N)', y = 'log10(Prob. mass)', title = '\u03c1=0.15; \u03b8=1e-4')+
theme(axis.title = element_text(size = axis_title_size),
axis.text = element_text(size = axis_text_size),
legend.title = element_text(size = legend_title_size),
legend.text = element_text(size = legend_text_size),
legend.position = c(0.8,0.8))
## p3: rho = 0.2, mutate = 1e-4
rho = 0.2
theta = 1e-4
sampled$pn = unlist(lapply(sampled$proposed, FUN = function(k){
return(exp(log_pN(k, rho)))
}))
sampled$pngm = unlist(lapply(sampled$proposed, FUN = function(k){
return(pN_gM(k, rho, theta))
}))
pm = pM_approx(nu = nu, theta = theta, rho = rho)
sampled$pngm = sampled$pngm / pm
sampled$diff = abs(log(sampled$pngm) - log(sampled$pn))
intersect$close[3] = sampled$proposed[which(sampled$diff == min(sampled$diff))]
p3 = ggplot(sampled[1:plot_range, ])+
geom_point(aes(x = log10(proposed), y = log10(pn), color = 'N'), size = 0.4)+
geom_line(aes(x = log10(proposed), y = log10(pn), color = 'N'), linetype = 2, size=0.2)+
geom_point(aes(x = log10(proposed), y = log10(pngm), color = 'N|M=1'), size = 0.4)+
geom_line(aes(x = log10(proposed), y = log10(pngm), color = 'N|M=1'), linetype = 2, size=0.2)+
scale_color_manual(name = "Prob. mass", values = c("N" = "darkblue", "N|M=1" = "red"))+
labs( x= 'log10(N)', y = 'log10(Prob. mass)', title = '\u03c1=0.2; \u03b8=1e-4')+
theme(axis.title = element_text(size = axis_title_size),
axis.text = element_text(size = axis_text_size),
legend.title = element_text(size = legend_title_size),
legend.text = element_text(size = legend_text_size),
legend.position = c(0.8,0.8))
## p4: rho = 0.1, mutate = 1e-5
rho = 0.1
theta = 1e-5
sampled$pn = unlist(lapply(sampled$proposed, FUN = function(k){
return(exp(log_pN(k, rho)))
}))
sampled$pngm = unlist(lapply(sampled$proposed, FUN = function(k){
return(pN_gM(k, rho, theta))
}))
pm = pM_approx(nu = nu, theta = theta, rho = rho)
sampled$pngm = sampled$pngm / pm
sampled$diff = abs(log(sampled$pngm) - log(sampled$pn))
intersect$close[4] = sampled$proposed[which(sampled$diff == min(sampled$diff))]
p4 = ggplot(sampled[1:plot_range, ])+
geom_point(aes(x = log10(proposed), y = log10(pn), color = 'N'), size = 0.4)+
geom_line(aes(x = log10(proposed), y = log10(pn), color = 'N'), linetype = 2, size=0.2)+
geom_point(aes(x = log10(proposed), y = log10(pngm), color = 'N|M=1'), size = 0.4)+
geom_line(aes(x = log10(proposed), y = log10(pngm), color = 'N|M=1'), linetype = 2, size=0.2)+
scale_color_manual(name = "Prob. mass", values = c("N" = "darkblue", "N|M=1" = "red"))+
labs( x= 'log10(N)', y = 'log10(Prob. mass)', title = '\u03c1=0.1; \u03b8=1e-5')+
theme(axis.title = element_text(size = axis_title_size),
axis.text = element_text(size = axis_text_size),
legend.title = element_text(size = legend_title_size),
legend.text = element_text(size = legend_text_size),
legend.position = c(0.8,0.8))
## p5: rho = 0.15, mutate = 1e-5
rho = 0.15
theta = 1e-5
sampled$pn = unlist(lapply(sampled$proposed, FUN = function(k){
return(exp(log_pN(k, rho)))
}))
sampled$pngm = unlist(lapply(sampled$proposed, FUN = function(k){
return(pN_gM(k, rho, theta))
}))
pm = pM_approx(nu = nu, theta = theta, rho = rho)
sampled$pngm = sampled$pngm / pm
sampled$diff = abs(log(sampled$pngm) - log(sampled$pn))
intersect$close[5] = sampled$proposed[which(sampled$diff == min(sampled$diff))]
p5 = ggplot(sampled[1:plot_range, ])+
geom_point(aes(x = log10(proposed), y = log10(pn), color = 'N'), size = 0.4)+
geom_line(aes(x = log10(proposed), y = log10(pn), color = 'N'), linetype = 2, size=0.2)+
geom_point(aes(x = log10(proposed), y = log10(pngm), color = 'N|M=1'), size = 0.4)+
geom_line(aes(x = log10(proposed), y = log10(pngm), color = 'N|M=1'), linetype = 2, size=0.2)+
scale_color_manual(name = "Prob. mass", values = c("N" = "darkblue", "N|M=1" = "red"))+
labs( x= 'log10(N)', y = 'log10(Prob. mass)', title = '\u03c1=0.15; \u03b8=1e-5')+
theme(axis.title = element_text(size = axis_title_size),
axis.text = element_text(size = axis_text_size),
legend.title = element_text(size = legend_title_size),
legend.text = element_text(size = legend_text_size),
legend.position = c(0.8,0.8))
## p6: rho = 0.2, mutate = 1e-5
rho = 0.2
theta = 1e-5
sampled$pn = unlist(lapply(sampled$proposed, FUN = function(k){
return(exp(log_pN(k, rho)))
}))
sampled$pngm = unlist(lapply(sampled$proposed, FUN = function(k){
return(pN_gM(k, rho, theta))
}))
pm = pM_approx(nu = nu, theta = theta, rho = rho)
sampled$pngm = sampled$pngm / pm
sampled$diff = abs(log(sampled$pngm) - log(sampled$pn))
intersect$close[6] = sampled$proposed[which(sampled$diff == min(sampled$diff))]
p6 = ggplot(sampled[1:plot_range, ])+
geom_point(aes(x = log10(proposed), y = log10(pn), color = 'N'), size = 0.4)+
geom_line(aes(x = log10(proposed), y = log10(pn), color = 'N'), linetype = 2, size=0.2)+
geom_point(aes(x = log10(proposed), y = log10(pngm), color = 'N|M=1'), size = 0.4)+
geom_line(aes(x = log10(proposed), y = log10(pngm), color = 'N|M=1'), linetype = 2, size=0.2)+
scale_color_manual(name = "Prob. mass", values = c("N" = "darkblue", "N|M=1" = "red"))+
labs( x= 'log10(N)', y = 'log10(Prob. mass)', title = '\u03c1=0.2; \u03b8=1e-5')+
theme(axis.title = element_text(size = axis_title_size),
axis.text = element_text(size = axis_text_size),
legend.title = element_text(size = legend_title_size),
legend.text = element_text(size = legend_text_size),
legend.position = c(0.8,0.8))
## p7: rho = 0.1, mutate = 1e-6
rho = 0.1
theta = 1e-6
sampled$pn = unlist(lapply(sampled$proposed, FUN = function(k){
return(exp(log_pN(k, rho)))
}))
sampled$pngm = unlist(lapply(sampled$proposed, FUN = function(k){
return(pN_gM(k, rho, theta))
}))
pm = pM_approx(nu = nu, theta = theta, rho = rho)
sampled$pngm = sampled$pngm / pm
sampled$diff = abs(log(sampled$pngm) - log(sampled$pn))
intersect$close[7] = sampled$proposed[which(sampled$diff == min(sampled$diff))]
p7 = ggplot(sampled[1:plot_range, ])+
geom_point(aes(x = log10(proposed), y = log10(pn), color = 'N'), size = 0.4)+
geom_line(aes(x = log10(proposed), y = log10(pn), color = 'N'), linetype = 2, size=0.2)+
geom_point(aes(x = log10(proposed), y = log10(pngm), color = 'N|M=1'), size = 0.4)+
geom_line(aes(x = log10(proposed), y = log10(pngm), color = 'N|M=1'), linetype = 2, size=0.2)+
scale_color_manual(name = "Prob. mass", values = c("N" = "darkblue", "N|M=1" = "red"))+
labs( x= 'log10(N)', y = 'log10(Prob. mass)', title = '\u03c1=0.1; \u03b8=1e-6')+
theme(axis.title = element_text(size = axis_title_size),
axis.text = element_text(size = axis_text_size),
legend.title = element_text(size = legend_title_size),
legend.text = element_text(size = legend_text_size),
legend.position = c(0.8,0.8))
## p8: rho = 0.15, mutate = 1e-6
rho = 0.15
theta = 1e-6
sampled$pn = unlist(lapply(sampled$proposed, FUN = function(k){
return(exp(log_pN(k, rho)))
}))
sampled$pngm = unlist(lapply(sampled$proposed, FUN = function(k){
return(pN_gM(k, rho, theta))
}))
pm = pM_approx(nu = nu, theta = theta, rho = rho)
sampled$pngm = sampled$pngm / pm
sampled$diff = abs(log(sampled$pngm) - log(sampled$pn))
intersect$close[8] = sampled$proposed[which(sampled$diff == min(sampled$diff))]
p8 = ggplot(sampled[1:plot_range, ])+
geom_point(aes(x = log10(proposed), y = log10(pn), color = 'N'), size = 0.4)+
geom_line(aes(x = log10(proposed), y = log10(pn), color = 'N'), linetype = 2, size=0.2)+
geom_point(aes(x = log10(proposed), y = log10(pngm), color = 'N|M=1'), size = 0.4)+
geom_line(aes(x = log10(proposed), y = log10(pngm), color = 'N|M=1'), linetype = 2, size=0.2)+
scale_color_manual(name = "Prob. mass", values = c("N" = "darkblue", "N|M=1" = "red"))+
labs( x= 'log10(N)', y = 'log10(Prob. mass)', title = '\u03c1=0.15; \u03b8=1e-6')+
theme(axis.title = element_text(size = axis_title_size),
axis.text = element_text(size = axis_text_size),
legend.title = element_text(size = legend_title_size),
legend.text = element_text(size = legend_text_size),
legend.position = c(0.8,0.8))
## p9: rho = 0.2, mutate = 1e-6
rho = 0.2
theta = 1e-6
sampled$pn = unlist(lapply(sampled$proposed, FUN = function(k){
return(exp(log_pN(k, rho)))
}))
sampled$pngm = unlist(lapply(sampled$proposed, FUN = function(k){
return(pN_gM(k, rho, theta))
}))
pm = pM_approx(nu = nu, theta = theta, rho = rho)
sampled$pngm = sampled$pngm / pm
sampled$diff = abs(log(sampled$pngm) - log(sampled$pn))
intersect$close[9] = sampled$proposed[which(sampled$diff == min(sampled$diff))]
p9 = ggplot(sampled[1:plot_range, ])+
geom_point(aes(x = log10(proposed), y = log10(pn), color = 'N'), size = 0.4)+
geom_line(aes(x = log10(proposed), y = log10(pn), color = 'N'), linetype = 2, size=0.2)+
geom_point(aes(x = log10(proposed), y = log10(pngm), color = 'N|M=1'), size = 0.4)+
geom_line(aes(x = log10(proposed), y = log10(pngm), color = 'N|M=1'), linetype = 2, size=0.2)+
scale_color_manual(name = "Prob. mass", values = c("N" = "darkblue", "N|M=1" = "red"))+
labs( x= 'log10(N)', y = 'log10(Prob. mass)', title = '\u03c1=0.2; \u03b8=1e-6')+
theme(axis.title = element_text(size = axis_title_size),
axis.text = element_text(size = axis_text_size),
legend.title = element_text(size = legend_title_size),
legend.text = element_text(size = legend_text_size),
legend.position = c(0.8,0.8))
myGrobs <- list(p1, p2, p3, p4, p5, p6, p7, p8, p9)
gridExtra::grid.arrange(grobs = myGrobs, nrow = 3,ncol = 3)
load('~/RAwork/BOISE/BOISE_followup/fda_data_rearranged.RData')
### visualization
# lof function for ranking of block matrices
lof <- function(Z){
binary_str = apply(Z, 2, function(z){
return(paste(z, collapse = ""))
})
col_order = order(binary_str, decreasing = T)
return(Z[, col_order])
}
# Get rearranged columns / rows
block_res$col_block = lof(block_res$col_block)
block_res$row_block = lof(block_res$row_block)
active_ind = apply(block_res$col_block, 2, sum)
active_ind = which(active_ind > 0)
cpds = colnames(block_res$col_block[, active_ind])
## rearrange row indices to make better visualization
end = 1
k = 1
assays = colnames(block_res$row_block)
while (k <= nrow(block_res$row_block)) {
begin = end
while (block_res$row_block[k, end] == 1) {
end = end + 1
}
assays[begin:(end-1)] = rev(assays[begin:(end-1)])
k = k+1
}
block_res$row_block = block_res$row_block[, assays]
## visualize blocked data
rotate <- function(x) t(apply(x, 2, rev))
A = dat[assays, cpds]
A = (1 + A) / 2
A[is.na(A)] = 0
# image(rotate(dat))
image(rotate(A), axes = F, xlab = 'Compounds', ylab = 'Targets')
mtext(text=seq(0, 600, 100), side=2, line=0.5, at=seq(0, 600, 100) / 688, las=1, cex=1)
mtext(text=seq(0, 1200, 100), side=1, line=0.5, at=seq(0, 1200, 100) / 1262, las=1, cex=1)
set.seed(817)
setwd('~/RAwork/BOISE/BOISE_followup/PCBA_CV/')
### Fast boise
set.seed(817)
sample_size=500
idxs = sample(1:102)#102
### Plots
library(ggplot2)
idxs = idxs[1:31]
fast_entropy_nef_results = read.table('./fast_entropy_nef_results.txt', sep = ' ', header=T)
rand_nef_results = read.table('./rand_nef_results.txt', sep = ' ', header=T)
legend_title_size = 10
legend_text_size = 10
axis_title_size = 14
axis_text_size = 13
p1 <- ggplot()+
geom_point(aes(x = rand_nef_results$nef_100[idxs], y = fast_entropy_nef_results$nef_100[idxs]))+
geom_abline(slope = 1, intercept = 0, color = 'red')+
labs(title = 'Scatterplot of NEF10 for nA=100', x = 'random Boise', y = 'fast Boise')
p2 <- ggplot()+
geom_point(aes(x = rand_nef_results$nef_200[idxs], y = fast_entropy_nef_results$nef_200[idxs]))+
geom_abline(slope = 1, intercept = 0, color = 'red')+
labs(title = 'Scatterplot of NEF10 for nA=200', x = 'random Boise', y = 'fast Boise')
p3 <- ggplot()+
geom_point(aes(x = rand_nef_results$nef_500[idxs], y = fast_entropy_nef_results$nef_500[idxs]))+
geom_abline(slope = 1, intercept = 0, color = 'red')+
labs(title = 'Scatterplot of NEF10 for nA=500', x = 'random Boise', y = 'fast Boise')
p4 <- ggplot()+
geom_point(aes(x = rand_nef_results$nef_1000[idxs], y = fast_entropy_nef_results$nef_1000[idxs]))+
geom_abline(slope = 1, intercept = 0, color = 'red')+
labs(title = 'Scatterplot of NEF10 for nA=1000', x = 'random Boise', y = 'fast Boise')
myGrobs <- list(p1,p2, p3,p4)
gridExtra::grid.arrange(grobs = myGrobs, nrow = 2,ncol = 2)
load("simu_result_l012.RData")
setwd('~/RAwork/BOISE/BOISE_followup')
set.seed(817)
load("simu_result_l012.RData")
summary(l1_results$roc_half)
summary(l2_results$roc_half)
setwd('~/RAwork/BOISE/BOISE_followup/FDA_CV/')
set.seed(817)
nA = 16
baseline_roc = rep(NA,60)
baseline_nef = rep(NA,60)
# for naive baseline
for (id in 1:60) {
load(paste('~/CHTC_Downloads/FDA_cv/orig_clust_res_', as.character(id), '.RData',sep=''))
Scores = apply(train, 2, function(x){return(mean(x, na.rm=T))})
## ROCAUC
Response = as.vector(test)
Scores = as.vector(Scores)
rocobj = pROC::roc(response = Response, predictor = Scores, quiet = TRUE)
rocauc = rocobj$auc
baseline_roc[id] = rocauc
## NEF
nT = as.integer(ncol(train) * 0.1)
top = order(Scores,decreasing = T)[1:nT]
pred_hit = sum(test[top])
hit = sum(test)
maxhit = min(hit,nT)
nef10 = ((pred_hit/nT - hit/length(test)) / (maxhit/nT - hit/length(test)) + 1)/2
baseline_nef[id] = nef10
}
### Plots
library(ggplot2)
results = data.frame('Informer_size' = (1:20))
roc_results = read.table('./results/orig_roc_results.txt', sep = ' ', header=T)
results[1:20,'Boise_L1'] = apply(roc_results, 2,function(x){return(mean(x, na.rm = T))})[2:21]
# roc_results = read.table('fast_roc_results.txt', sep = ' ', header=T)[-58,]
# results[,'fast_entropy'] = apply(roc_results, 2,function(x){return(mean(x, na.rm = T))})[cols]
# roc_results = read.table('fast_info_1_roc_results.txt', sep = ' ', header=T)[-58,]
# results[,'fast_pel1'] = apply(roc_results, 2,function(x){return(mean(x, na.rm = T))})[cols]
roc_results = read.table('./results/rdinfo_roc_results.txt', sep = ' ', header=T)
results[,'Boise_rand'] = apply(roc_results, 2,function(x){return(mean(x, na.rm = T))})[2:21]
roc_results = read.table('./results/orig_new_roc_results.txt', sep = ' ', header = T)
results[1:16, 'Boise_L2'] = apply(roc_results, 2,function(x){return(mean(x, na.rm = T))})[2:17]
results[, 'Baseline'] = rep(mean(baseline_roc, na.rm=T), 20)
legend_title_size = 10
legend_text_size = 10
axis_title_size = 14
axis_text_size = 13
p1 <- ggplot(results)+
# geom_point(mapping = aes(x = Informer_size, y = Boise_fast))+
# geom_line(mapping = aes(x = Informer_size, y = Boise_fast, color = 'fast_Boise'))+
geom_point(mapping = aes(x = Informer_size, y = Boise_rand))+
geom_line(mapping = aes(x = Informer_size, y = Boise_rand, color = 'rand_Boise'))+
geom_line(mapping = aes(x = Informer_size, y = Baseline, color = 'Baseline'))+
geom_point(mapping = aes(x = Informer_size, y = Boise_L1))+
geom_line(mapping = aes(x = Informer_size, y = Boise_L1, color = 'Boise_L1'))+
geom_point(mapping = aes(x = Informer_size, y = Boise_L2))+
geom_line(mapping = aes(x = Informer_size, y = Boise_L2, color = 'Boise_L2'))+
geom_line(mapping = aes(x = Informer_size, y = Baseline, color = 'Baseline'))+
scale_color_manual(name = "Methods", values = c('fast_Boise' = 'purple',
'rand_Boise' = 'orange',
'Boise_L1' = 'green',
'Boise_L2' = 'blue',
"Baseline" = "red"))+
scale_x_continuous('Informer sizes', breaks = seq(1,20, by=1))+
scale_y_continuous('ROCAUC mean', limits = c(0.789, 0.85))+
#scale_y_continuous('NEF mean', limits = c(0.673, 0.789))+
#scale_y_continuous('revNEF mean', limits = c(0.66, 0.73))+
theme(axis.title = element_text(size = axis_title_size),
axis.text = element_text(size = axis_text_size),
legend.title = element_text(size = legend_title_size),
legend.text = element_text(size = legend_text_size),
#legend.position = c(0.85,0.25),
legend.position = c(0.85,0.25))
myGrobs <- list(p1,p2)
nef_results = read.table('./results/orig_nef_results.txt', sep = ' ', header=T)
results[1:20,'Boise_L1'] = apply(nef_results, 2,function(x){return(mean(x, na.rm = T))})[2:21]
# nef_results = read.table('fast_nef_results.txt', sep = ' ', header=T)[-58,]
# results[,'fast_entropy'] = apply(nef_results, 2,function(x){return(mean(x, na.rm = T))})[cols]
# nef_results = read.table('fast_info_1_nef_results.txt', sep = ' ', header=T)[-58,]
# results[,'fast_pel1'] = apply(nef_results, 2,function(x){return(mean(x, na.rm = T))})[cols]
nef_results = read.table('./results/rdinfo_nef_results.txt', sep = ' ', header=T)
results[,'Boise_rand'] = apply(nef_results, 2,function(x){return(mean(x, na.rm = T))})[2:21]
nef_results = read.table('./results/orig_new_nef_results.txt', sep = ' ', header=T)
results[1:16,'Boise_L2'] = apply(nef_results, 2,function(x){return(mean(x, na.rm = T))})[2:17]
results[, 'Baseline'] = rep(mean(baseline_nef, na.rm=T), 20)
p2 <- ggplot(results)+
# geom_point(mapping = aes(x = Informer_size, y = Boise_fast))+
# geom_line(mapping = aes(x = Informer_size, y = Boise_fast, color = 'fast_Boise'))+
geom_point(mapping = aes(x = Informer_size, y = Boise_rand))+
geom_line(mapping = aes(x = Informer_size, y = Boise_rand, color = 'rand_Boise'))+
geom_line(mapping = aes(x = Informer_size, y = Baseline, color = 'Baseline'))+
geom_point(mapping = aes(x = Informer_size, y = Boise_L1))+
geom_line(mapping = aes(x = Informer_size, y = Boise_L1, color = 'Boise_L1'))+
geom_point(mapping = aes(x = Informer_size, y = Boise_L2))+
geom_line(mapping = aes(x = Informer_size, y = Boise_L2, color = 'Boise_L2'))+
geom_line(mapping = aes(x = Informer_size, y = Baseline, color = 'Baseline'))+
scale_color_manual(name = "Methods", values = c('fast_Boise' = 'purple',
'rand_Boise' = 'orange',
'Boise_L1' = 'green',
'Boise_L2' = 'blue',
"Baseline" = "red"))+
scale_x_continuous('Informer sizes', breaks = seq(1,20, by=1))+
#scale_y_continuous('ROCAUC mean', limits = c(0.789, 0.85))+
scale_y_continuous('NEF mean', limits = c(0.673, 0.789))+
#scale_y_continuous('revNEF mean', limits = c(0.66, 0.73))+
theme(axis.title = element_text(size = axis_title_size),
axis.text = element_text(size = axis_text_size),
legend.title = element_text(size = legend_title_size),
legend.text = element_text(size = legend_text_size),
#legend.position = c(0.85,0.25),
legend.position = c(0.85,0.25))
myGrobs <- list(p1,p2)
gridExtra::grid.arrange(grobs = myGrobs, nrow = 2,ncol = 1)
### for informer search
test_ids = read.table('Test_IDS.txt')
informs = read.table('~/CHTC_Downloads/FDA_cv/orig_new_informer_16.txt')
load('fda_data.RData')
candidates = c()
ids = c()
count = 0
for  (id in 41:60) {
test_id = test_ids[id,1]
test = dat[rownames(dat)==test_id,]
complete_idx = which(!is.na(test))
count = count + length(complete_idx)
train = dat[!row.names(dat)==test_id, complete_idx]
test = test[complete_idx]
cids = colnames(train)
pre_inform = as.numeric(unlist(strsplit(as.character(informs$V2[id]), split = ' ')))
#pre_inform=c()
cand_num = ncol(train)
ids = c(ids, rep(id,cand_num - length(pre_inform)))
candidates= c(candidates, setdiff(1:cand_num, pre_inform))
}
A = data.frame(id = ids, candidate = candidates)
write.table(A,file = '~/Upload/Boise_followup/job_list.txt',col.names = F,row.names = F)
