sampled = data.frame(proposed = 2:nrange)
sampled$pn = unlist(lapply(sampled$proposed, FUN = function(k){
return(exp(log_pN(k, rho)))
}))
sampled$pngm = unlist(lapply(sampled$proposed, FUN = function(k){
return(pN_gM(k, rho, theta))
}))
pm = pM_approx(nu = nu, theta = theta, rho = rho)
sampled$pngm = sampled$pngm / pm
sampled$diff = abs(log(sampled$pngm) - log(sampled$pn))
intersect$close[1] = sampled$proposed[which(sampled$diff == min(sampled$diff))]
p1 = ggplot(sampled[1:plot_range, ])+
geom_point(aes(x = log10(proposed), y = log10(pn), color = 'N'), size = 0.4)+
geom_line(aes(x = log10(proposed), y = log10(pn), color = 'N'), linetype = 2, size=0.2)+
geom_point(aes(x = log10(proposed), y = log10(pngm), color = 'N|M=1'), size = 0.4)+
geom_line(aes(x = log10(proposed), y = log10(pngm), color = 'N|M=1'), linetype = 2, size=0.2)+
scale_color_manual(name = "Prob. mass", values = c("N" = "darkblue", "N|M=1" = "red"))+
labs( x= 'log10(N)', y = 'log10(Prob. mass)', title = '\u03c1=0.1; \u03b8=1e-4')+
theme(axis.title = element_text(size = axis_title_size),
axis.text = element_text(size = axis_text_size),
legend.title = element_text(size = legend_title_size),
legend.text = element_text(size = legend_text_size),
legend.position = c(0.8,0.8))
p1
## p2: rho = 0.15, mutate = 1e-4
rho = 0.15
theta = 1e-4
sampled$pn = unlist(lapply(sampled$proposed, FUN = function(k){
return(exp(log_pN(k, rho)))
}))
sampled$pngm = unlist(lapply(sampled$proposed, FUN = function(k){
return(pN_gM(k, rho, theta))
}))
pm = pM_approx(nu = nu, theta = theta, rho = rho)
sampled$pngm = sampled$pngm / pm
sampled$diff = abs(log(sampled$pngm) - log(sampled$pn))
intersect$close[2] = sampled$proposed[which(sampled$diff == min(sampled$diff))]
p2 = ggplot(sampled[1:plot_range, ])+
geom_point(aes(x = log10(proposed), y = log10(pn), color = 'N'), size = 0.4)+
geom_line(aes(x = log10(proposed), y = log10(pn), color = 'N'), linetype = 2, size=0.2)+
geom_point(aes(x = log10(proposed), y = log10(pngm), color = 'N|M=1'), size = 0.4)+
geom_line(aes(x = log10(proposed), y = log10(pngm), color = 'N|M=1'), linetype = 2, size=0.2)+
scale_color_manual(name = "Prob. mass", values = c("N" = "darkblue", "N|M=1" = "red"))+
labs( x= 'log10(N)', y = 'log10(Prob. mass)', title = '\u03c1=0.15; \u03b8=1e-4')+
theme(axis.title = element_text(size = axis_title_size),
axis.text = element_text(size = axis_text_size),
legend.title = element_text(size = legend_title_size),
legend.text = element_text(size = legend_text_size),
legend.position = c(0.8,0.8))
## p3: rho = 0.2, mutate = 1e-4
rho = 0.2
theta = 1e-4
sampled$pn = unlist(lapply(sampled$proposed, FUN = function(k){
return(exp(log_pN(k, rho)))
}))
sampled$pngm = unlist(lapply(sampled$proposed, FUN = function(k){
return(pN_gM(k, rho, theta))
}))
pm = pM_approx(nu = nu, theta = theta, rho = rho)
sampled$pngm = sampled$pngm / pm
sampled$diff = abs(log(sampled$pngm) - log(sampled$pn))
intersect$close[3] = sampled$proposed[which(sampled$diff == min(sampled$diff))]
p3 = ggplot(sampled[1:plot_range, ])+
geom_point(aes(x = log10(proposed), y = log10(pn), color = 'N'), size = 0.4)+
geom_line(aes(x = log10(proposed), y = log10(pn), color = 'N'), linetype = 2, size=0.2)+
geom_point(aes(x = log10(proposed), y = log10(pngm), color = 'N|M=1'), size = 0.4)+
geom_line(aes(x = log10(proposed), y = log10(pngm), color = 'N|M=1'), linetype = 2, size=0.2)+
scale_color_manual(name = "Prob. mass", values = c("N" = "darkblue", "N|M=1" = "red"))+
labs( x= 'log10(N)', y = 'log10(Prob. mass)', title = '\u03c1=0.2; \u03b8=1e-4')+
theme(axis.title = element_text(size = axis_title_size),
axis.text = element_text(size = axis_text_size),
legend.title = element_text(size = legend_title_size),
legend.text = element_text(size = legend_text_size),
legend.position = c(0.8,0.8))
## p4: rho = 0.1, mutate = 1e-5
rho = 0.1
theta = 1e-5
sampled$pn = unlist(lapply(sampled$proposed, FUN = function(k){
return(exp(log_pN(k, rho)))
}))
sampled$pngm = unlist(lapply(sampled$proposed, FUN = function(k){
return(pN_gM(k, rho, theta))
}))
pm = pM_approx(nu = nu, theta = theta, rho = rho)
sampled$pngm = sampled$pngm / pm
sampled$diff = abs(log(sampled$pngm) - log(sampled$pn))
intersect$close[4] = sampled$proposed[which(sampled$diff == min(sampled$diff))]
p4 = ggplot(sampled[1:plot_range, ])+
geom_point(aes(x = log10(proposed), y = log10(pn), color = 'N'), size = 0.4)+
geom_line(aes(x = log10(proposed), y = log10(pn), color = 'N'), linetype = 2, size=0.2)+
geom_point(aes(x = log10(proposed), y = log10(pngm), color = 'N|M=1'), size = 0.4)+
geom_line(aes(x = log10(proposed), y = log10(pngm), color = 'N|M=1'), linetype = 2, size=0.2)+
scale_color_manual(name = "Prob. mass", values = c("N" = "darkblue", "N|M=1" = "red"))+
labs( x= 'log10(N)', y = 'log10(Prob. mass)', title = '\u03c1=0.1; \u03b8=1e-5')+
theme(axis.title = element_text(size = axis_title_size),
axis.text = element_text(size = axis_text_size),
legend.title = element_text(size = legend_title_size),
legend.text = element_text(size = legend_text_size),
legend.position = c(0.8,0.8))
## p5: rho = 0.15, mutate = 1e-5
rho = 0.15
theta = 1e-5
sampled$pn = unlist(lapply(sampled$proposed, FUN = function(k){
return(exp(log_pN(k, rho)))
}))
sampled$pngm = unlist(lapply(sampled$proposed, FUN = function(k){
return(pN_gM(k, rho, theta))
}))
pm = pM_approx(nu = nu, theta = theta, rho = rho)
sampled$pngm = sampled$pngm / pm
sampled$diff = abs(log(sampled$pngm) - log(sampled$pn))
intersect$close[5] = sampled$proposed[which(sampled$diff == min(sampled$diff))]
p5 = ggplot(sampled[1:plot_range, ])+
geom_point(aes(x = log10(proposed), y = log10(pn), color = 'N'), size = 0.4)+
geom_line(aes(x = log10(proposed), y = log10(pn), color = 'N'), linetype = 2, size=0.2)+
geom_point(aes(x = log10(proposed), y = log10(pngm), color = 'N|M=1'), size = 0.4)+
geom_line(aes(x = log10(proposed), y = log10(pngm), color = 'N|M=1'), linetype = 2, size=0.2)+
scale_color_manual(name = "Prob. mass", values = c("N" = "darkblue", "N|M=1" = "red"))+
labs( x= 'log10(N)', y = 'log10(Prob. mass)', title = '\u03c1=0.15; \u03b8=1e-5')+
theme(axis.title = element_text(size = axis_title_size),
axis.text = element_text(size = axis_text_size),
legend.title = element_text(size = legend_title_size),
legend.text = element_text(size = legend_text_size),
legend.position = c(0.8,0.8))
## p6: rho = 0.2, mutate = 1e-5
rho = 0.2
theta = 1e-5
sampled$pn = unlist(lapply(sampled$proposed, FUN = function(k){
return(exp(log_pN(k, rho)))
}))
sampled$pngm = unlist(lapply(sampled$proposed, FUN = function(k){
return(pN_gM(k, rho, theta))
}))
pm = pM_approx(nu = nu, theta = theta, rho = rho)
sampled$pngm = sampled$pngm / pm
sampled$diff = abs(log(sampled$pngm) - log(sampled$pn))
intersect$close[6] = sampled$proposed[which(sampled$diff == min(sampled$diff))]
p6 = ggplot(sampled[1:plot_range, ])+
geom_point(aes(x = log10(proposed), y = log10(pn), color = 'N'), size = 0.4)+
geom_line(aes(x = log10(proposed), y = log10(pn), color = 'N'), linetype = 2, size=0.2)+
geom_point(aes(x = log10(proposed), y = log10(pngm), color = 'N|M=1'), size = 0.4)+
geom_line(aes(x = log10(proposed), y = log10(pngm), color = 'N|M=1'), linetype = 2, size=0.2)+
scale_color_manual(name = "Prob. mass", values = c("N" = "darkblue", "N|M=1" = "red"))+
labs( x= 'log10(N)', y = 'log10(Prob. mass)', title = '\u03c1=0.2; \u03b8=1e-5')+
theme(axis.title = element_text(size = axis_title_size),
axis.text = element_text(size = axis_text_size),
legend.title = element_text(size = legend_title_size),
legend.text = element_text(size = legend_text_size),
legend.position = c(0.8,0.8))
## p7: rho = 0.1, mutate = 1e-6
rho = 0.1
theta = 1e-6
sampled$pn = unlist(lapply(sampled$proposed, FUN = function(k){
return(exp(log_pN(k, rho)))
}))
sampled$pngm = unlist(lapply(sampled$proposed, FUN = function(k){
return(pN_gM(k, rho, theta))
}))
pm = pM_approx(nu = nu, theta = theta, rho = rho)
sampled$pngm = sampled$pngm / pm
sampled$diff = abs(log(sampled$pngm) - log(sampled$pn))
intersect$close[7] = sampled$proposed[which(sampled$diff == min(sampled$diff))]
p7 = ggplot(sampled[1:plot_range, ])+
geom_point(aes(x = log10(proposed), y = log10(pn), color = 'N'), size = 0.4)+
geom_line(aes(x = log10(proposed), y = log10(pn), color = 'N'), linetype = 2, size=0.2)+
geom_point(aes(x = log10(proposed), y = log10(pngm), color = 'N|M=1'), size = 0.4)+
geom_line(aes(x = log10(proposed), y = log10(pngm), color = 'N|M=1'), linetype = 2, size=0.2)+
scale_color_manual(name = "Prob. mass", values = c("N" = "darkblue", "N|M=1" = "red"))+
labs( x= 'log10(N)', y = 'log10(Prob. mass)', title = '\u03c1=0.1; \u03b8=1e-6')+
theme(axis.title = element_text(size = axis_title_size),
axis.text = element_text(size = axis_text_size),
legend.title = element_text(size = legend_title_size),
legend.text = element_text(size = legend_text_size),
legend.position = c(0.8,0.8))
## p8: rho = 0.15, mutate = 1e-6
rho = 0.15
theta = 1e-6
sampled$pn = unlist(lapply(sampled$proposed, FUN = function(k){
return(exp(log_pN(k, rho)))
}))
sampled$pngm = unlist(lapply(sampled$proposed, FUN = function(k){
return(pN_gM(k, rho, theta))
}))
pm = pM_approx(nu = nu, theta = theta, rho = rho)
sampled$pngm = sampled$pngm / pm
sampled$diff = abs(log(sampled$pngm) - log(sampled$pn))
intersect$close[8] = sampled$proposed[which(sampled$diff == min(sampled$diff))]
p8 = ggplot(sampled[1:plot_range, ])+
geom_point(aes(x = log10(proposed), y = log10(pn), color = 'N'), size = 0.4)+
geom_line(aes(x = log10(proposed), y = log10(pn), color = 'N'), linetype = 2, size=0.2)+
geom_point(aes(x = log10(proposed), y = log10(pngm), color = 'N|M=1'), size = 0.4)+
geom_line(aes(x = log10(proposed), y = log10(pngm), color = 'N|M=1'), linetype = 2, size=0.2)+
scale_color_manual(name = "Prob. mass", values = c("N" = "darkblue", "N|M=1" = "red"))+
labs( x= 'log10(N)', y = 'log10(Prob. mass)', title = '\u03c1=0.15; \u03b8=1e-6')+
theme(axis.title = element_text(size = axis_title_size),
axis.text = element_text(size = axis_text_size),
legend.title = element_text(size = legend_title_size),
legend.text = element_text(size = legend_text_size),
legend.position = c(0.8,0.8))
## p9: rho = 0.2, mutate = 1e-6
rho = 0.2
theta = 1e-6
sampled$pn = unlist(lapply(sampled$proposed, FUN = function(k){
return(exp(log_pN(k, rho)))
}))
sampled$pngm = unlist(lapply(sampled$proposed, FUN = function(k){
return(pN_gM(k, rho, theta))
}))
pm = pM_approx(nu = nu, theta = theta, rho = rho)
sampled$pngm = sampled$pngm / pm
sampled$diff = abs(log(sampled$pngm) - log(sampled$pn))
intersect$close[9] = sampled$proposed[which(sampled$diff == min(sampled$diff))]
p9 = ggplot(sampled[1:plot_range, ])+
geom_point(aes(x = log10(proposed), y = log10(pn), color = 'N'), size = 0.4)+
geom_line(aes(x = log10(proposed), y = log10(pn), color = 'N'), linetype = 2, size=0.2)+
geom_point(aes(x = log10(proposed), y = log10(pngm), color = 'N|M=1'), size = 0.4)+
geom_line(aes(x = log10(proposed), y = log10(pngm), color = 'N|M=1'), linetype = 2, size=0.2)+
scale_color_manual(name = "Prob. mass", values = c("N" = "darkblue", "N|M=1" = "red"))+
labs( x= 'log10(N)', y = 'log10(Prob. mass)', title = '\u03c1=0.2; \u03b8=1e-6')+
theme(axis.title = element_text(size = axis_title_size),
axis.text = element_text(size = axis_text_size),
legend.title = element_text(size = legend_title_size),
legend.text = element_text(size = legend_text_size),
legend.position = c(0.8,0.8))
myGrobs <- list(p1, p2, p3, p4, p5, p6, p7, p8, p9)
gridExtra::grid.arrange(grobs = myGrobs, nrow = 3,ncol = 3)
load('~/RAwork/BOISE/BOISE_followup/fda_data_rearranged.RData')
### visualization
# lof function for ranking of block matrices
lof <- function(Z){
binary_str = apply(Z, 2, function(z){
return(paste(z, collapse = ""))
})
col_order = order(binary_str, decreasing = T)
return(Z[, col_order])
}
# Get rearranged columns / rows
block_res$col_block = lof(block_res$col_block)
block_res$row_block = lof(block_res$row_block)
active_ind = apply(block_res$col_block, 2, sum)
active_ind = which(active_ind > 0)
cpds = colnames(block_res$col_block[, active_ind])
## rearrange row indices to make better visualization
end = 1
k = 1
assays = colnames(block_res$row_block)
while (k <= nrow(block_res$row_block)) {
begin = end
while (block_res$row_block[k, end] == 1) {
end = end + 1
}
assays[begin:(end-1)] = rev(assays[begin:(end-1)])
k = k+1
}
block_res$row_block = block_res$row_block[, assays]
## visualize blocked data
rotate <- function(x) t(apply(x, 2, rev))
A = dat[assays, cpds]
A = (1 + A) / 2
A[is.na(A)] = 0
# image(rotate(dat))
image(rotate(A), axes = F, xlab = 'Compounds', ylab = 'Targets')
mtext(text=seq(0, 600, 100), side=2, line=0.5, at=seq(0, 600, 100) / 688, las=1, cex=1)
mtext(text=seq(0, 1200, 100), side=1, line=0.5, at=seq(0, 1200, 100) / 1262, las=1, cex=1)
library(BOISE)
load(pkis1)
data(pkis1)
name = colnames(pkis1)
pkis1 <- t(apply(pkis1, 1, function(x){
thres = mean(x) + 2 * sd(x)
return(as.numeric(x>thres))
}))
colnames(pkis1) = name
mean(pkis1)
## for clustering in groups
load('pkis1_jaccard.RData')
setwd('~/RAwork/BOISE/BOISE_followup/')
set.seed(2)
data(pkis1)
name = colnames(pkis1)
pkis1 <- t(apply(pkis1, 1, function(x){
thres = mean(x) + 2 * sd(x)
return(as.numeric(x>thres))
}))
colnames(pkis1) = name
## for clustering in groups
load('pkis1_jaccard.RData')
lof <- function(Z){
binary_str = apply(Z, 2, function(z){
return(paste(z, collapse = ""))
})
col_order = order(binary_str, decreasing = T)
return(Z[, col_order])
}
col_block = lof(col_block)
View(col_block)
pkis1 = pkis1[, colnames(col_block)]
View(pkis1)
## visualize blocked data
rotate <- function(x) t(apply(x, 2, rev))
image(rotate(pkis1), axes = F)
mtext(text=seq(0, 220, 20), side=2, line=0.5, at=seq(0, 220, 20) / 224, las=1, cex=1)
mtext(text=seq(0, 360, 30), side=1, line=0.5, at=seq(0, 360, 30) / 366, las=1, cex=1)
image(pkis1, axes = F)
mtext(text=seq(0, 220, 20), side=1, line=0.5, at=seq(0, 220, 20) / 224, las=1, cex=1)
mtext(text=seq(0, 360, 30), side=2, line=0.5, at=seq(0, 360, 30) / 366, las=1, cex=1)
## visualize blocked data
rotate <- function(x) t(apply(x, 2, rev))
image(rotate(pkis1), axes = F)
mtext(text=seq(0, 220, 20), side=2, line=0.5, at=seq(0, 220, 20) / 224, las=1, cex=1)
mtext(text=seq(0, 360, 30), side=1, line=0.5, at=seq(0, 360, 30) / 366, las=1, cex=1)
col_block = lof(1 - col_block)
k = 1
block = pkis1[, names(col_block[k, col_block[k,]>0])]
pkis1 = pkis1[, colnames(col_block)]
## visualize blocked data
rotate <- function(x) t(apply(x, 2, rev))
image(rotate(pkis1), axes = F)
mtext(text=seq(0, 220, 20), side=2, line=0.5, at=seq(0, 220, 20) / 224, las=1, cex=1)
mtext(text=seq(0, 360, 30), side=1, line=0.5, at=seq(0, 360, 30) / 366, las=1, cex=1)
image(rotate(pkis1), axes = F)
mtext(text=seq(0, 220, 20), side=4, line=0.5, at=seq(0, 220, 20) / 224, las=1, cex=1)
mtext(text=seq(0, 360, 30), side=3, line=0.5, at=seq(0, 360, 30) / 366, las=1, cex=1)
image(rotate(pkis1), axes = F)
mtext(text=seq(0, 220, 20), side=4, line=0.5, at=seq(0, 220, 20) / 224, las=1, cex=1)
mtext(text=seq(0, 360, 30), side=1, line=0.5, at=seq(0, 360, 30) / 366, las=1, cex=1)
setwd('~/Drug_Discovery/BOISE/CR_BetaPrior/')
### New target
load("newtar.RData")
dim(dat)
load("~/Drug_Discovery/BOISE/CR_BetaPrior/pkis1.rda")
newtar = newtar[,-which(colnames(newtar)%in%setdiff(colnames(newtar),colnames(dat)))]
pkis1 = pkis1[,-which(colnames(pkis1)%in%setdiff(colnames(pkis1),colnames(dat)))]
pkis1 = pkis1[,order(as.numeric(colnames(pkis1)))]
inform = c(217,252,8,33,42,178,67,88,35,162,34,126,180,278,234,106)
## 302,76,61,188,216,262,203,169,54,194,234,219,250,108,28,209
nA=length(inform)
XA = as.matrix(dat[1:224 ,inform])
bin = apply(XA,1,function(x){return(sum(x * 2^(0:(length(x)-1))))})
l = length(unique(bin))
centroid = matrix(0,l,length(inform))
colnames(centroid) = colnames(dat)[inform]
for (i in 1:l) {
code = unique(bin)[i]
if(length(which(bin == code))==1){
centroid[i,] = pkis1[which(bin==code),inform]
} else{
centroid[i,] = apply(pkis1[which(bin == code),inform],2,mean)
}
}
result3 = sapply(1:3,function(i){
test = dat[224+i, ]
train = dat[1:224,]
a = rep(mean(train),dim(train)[2])
b = 1 - a
dist = apply(centroid, 1, function(x){
return(sum((x-newtar[i,inform])^2))
})
neighbor = order(dist)[1]
xA = dat[which(bin==unique(bin)[neighbor])[1],inform]
post_probs = matrix(0, 1, iter)
post_thetas = matrix(0, iter, m)
for (k in 1:iter){
postls = pel2_beta(P[[k]], x0=train, xA, nA, A=inform, nT=36, a, b, alpha=15)
post_probs[k] = postls$post_prob
post_thetas[k, ] = postls$post_theta
}
post_probs = post_probs / (sum(post_probs))
Score = post_probs %*% post_thetas
Score[inform[which(xA==1)]] = rep(max(Score) + 1, sum(xA))
Score[inform[which(xA==0)]] = rep(min(Score) - 1, nA - sum(xA))
top = order(Score,decreasing = T)[1:nT]
print(sum(test[top]))
return(sum(test[top]))
})
dim(pkis1)
m = 312
result3 = sapply(1:3,function(i){
test = dat[224+i, ]
train = dat[1:224,]
a = rep(mean(train),dim(train)[2])
b = 1 - a
dist = apply(centroid, 1, function(x){
return(sum((x-newtar[i,inform])^2))
})
neighbor = order(dist)[1]
xA = dat[which(bin==unique(bin)[neighbor])[1],inform]
post_probs = matrix(0, 1, iter)
post_thetas = matrix(0, iter, m)
for (k in 1:iter){
postls = pel2_beta(P[[k]], x0=train, xA, nA, A=inform, nT=36, a, b, alpha=15)
post_probs[k] = postls$post_prob
post_thetas[k, ] = postls$post_theta
}
post_probs = post_probs / (sum(post_probs))
Score = post_probs %*% post_thetas
Score[inform[which(xA==1)]] = rep(max(Score) + 1, sum(xA))
Score[inform[which(xA==0)]] = rep(min(Score) - 1, nA - sum(xA))
top = order(Score,decreasing = T)[1:nT]
print(sum(test[top]))
return(sum(test[top]))
})
newtar[1,inform]
mean(newtar[1,])
sd(newtar[1,])
newtar[2,inform]
mean(newtar[2,])
sd(newtar[2,])
## New BoxPlot Comparison for NEF10 and ROCAUC of PKIS1
library(tidyverse)
testresult <- read.csv("pkis18_eval_NEF10.csv", header = T)
m = dim(testresult)[1]
temp = data.frame("NEF10" = rep(0, 7 * m), "IBR" = c(rep("BC_w",m),rep("BF_w",m),rep("CS",m),
rep("RS",m),rep("AS",m), rep('ACBOISE',m),
rep("BOISE",m)))
temp$NEF10 = c(testresult$BC_w,testresult$BF_w,testresult$CS8,testresult$RS8,
testresult$AS8,testresult$AC_BOISE8, testresult$BOISE8)
temp$IBR = as.factor(temp$IBR)
temp$IBR <- factor(temp$IBR, levels =c("BC_w","BF_w","CS","RS","AS",'ACBOISE', "BOISE"))
p1 <- ggplot(temp, aes(x = IBR, y = NEF10, fill = IBR)) +
geom_violin(scale = "width", trim = T, adjust = 0.5 )+
geom_boxplot(width = 0.05,aes(fill = "white")) +
scale_y_continuous(limits = c(0.4,1))+
scale_fill_manual(values = c( "royalblue1", "#009E73","#F0E442","#D55E00","#CC79A7", "aquamarine3",
"darkgoldenrod2","#000000"))+
theme(legend.position="none") +
stat_summary(fun.y=median, geom="point", size=1, color="white") +
labs(title="NEF10 for nA = 8") +
theme(plot.title = element_text(hjust = 0.5))
testresult <- read.csv("pkis18_eval_ROCAUC.csv", header = T)
m = dim(testresult)[1]
temp = data.frame("ROCAUC" = rep(0, 7 * m), "IBR" = c(rep("BC_w",m),rep("BF_w",m),rep("CS",m),
rep("RS",m),rep("AS",m), rep('ACBOISE',m),
rep("BOISE",m)))
temp$ROCAUC = c(testresult$BC_w,testresult$BF_w,testresult$CS8,testresult$RS8,
testresult$AS8,testresult$AC_BOISE8,testresult$BOISE8)
temp$IBR = as.factor(temp$IBR)
temp$IBR <- factor(temp$IBR, levels =c("BC_w","BF_w","CS","RS","AS", 'ACBOISE',"BOISE"))
p2 <- ggplot(temp, aes(x = IBR, y = ROCAUC, fill = IBR)) +
geom_violin(scale = "width", trim = T, adjust = 0.5 )+
geom_boxplot(width = 0.05,aes(fill = "white")) +
scale_y_continuous(limits = c(0,1))+
scale_fill_manual(values = c('royalblue1', "#009E73","#F0E442","#D55E00","#CC79A7","aquamarine3",
"darkgoldenrod2","#000000"))+
theme(legend.position="none") +
stat_summary(fun.y=median, geom="point", size=1, color="white") +
labs(title="ROCAUC for nA = 8") +
theme(plot.title = element_text(hjust = 0.5))
testresult <- read.csv("pkis1_eval_NEF10.csv", header = T)
m = dim(testresult)[1]
temp = data.frame("NEF10" = rep(0, 7 * m), "IBR" = c(rep("BC_w",m),rep("BF_w",m),rep("CS",m),
rep("RS",m),rep("AS",m), rep('ACBOISE',m),
rep("BOISE",m)))
temp$NEF10 = c(testresult$BC_w,testresult$BF_w,testresult$CS16,testresult$RS16,
testresult$AS16,testresult$AC_BOISE16,testresult$BOISE16)
temp$IBR = as.factor(temp$IBR)
temp$IBR <- factor(temp$IBR, levels =c("BC_w","BF_w","CS","RS","AS",'ACBOISE',"BOISE"))
p3 <- ggplot(temp, aes(x = IBR, y = NEF10, fill = IBR)) +
geom_violin(scale = "width", trim = T, adjust = 0.5 )+
geom_boxplot(width = 0.05,aes(fill = "white")) +
scale_y_continuous(limits = c(0.4,1))+
scale_fill_manual(values = c( 'royalblue1',"#009E73","#F0E442","#D55E00","#CC79A7", "aquamarine3",
"darkgoldenrod2","#000000"))+
theme(legend.position="none") +
stat_summary(fun.y=median, geom="point", size=1, color="white") +
labs(title="NEF10 for nA = 16") +
theme(plot.title = element_text(hjust = 0.5))
testresult <- read.csv("pkis1_eval_ROCAUC.csv", header = T)
m = dim(testresult)[1]
temp = data.frame("ROCAUC" = rep(0, 7 * m), "IBR" = c(rep("BC_w",m),rep("BF_w",m),rep("CS",m),
rep("RS",m),rep("AS",m),rep('ACBOISE',m),
rep("BOISE",m)))
temp$ROCAUC = c(testresult$BC_w,testresult$BF_w,testresult$CS16,testresult$RS16,
testresult$AS16,testresult$AC_BOISE16,testresult$BOISE16)
temp$IBR = as.factor(temp$IBR)
temp$IBR <- factor(temp$IBR, levels =c("BC_w","BF_w","CS","RS","AS",'ACBOISE',"BOISE"))
p4 <- ggplot(temp, aes(x = IBR, y = ROCAUC, fill = IBR)) +
geom_violin(scale = "width", trim = T, adjust = 0.5 )+
geom_boxplot(width = 0.05,aes(fill = "white")) +
scale_y_continuous(limits = c(0,1))+
scale_fill_manual(values = c('royalblue1',"#009E73","#F0E442","#D55E00","#CC79A7","aquamarine3",
"darkgoldenrod2","#000000"))+
theme(legend.position="none") +
stat_summary(fun.y=median, geom="point", size=1, color="white") +
labs(title="ROCAUC for nA = 16") +
theme(plot.title = element_text(hjust = 0.5))
myGrobs <- list(p1,p3,p2,p4)
gridExtra::grid.arrange( grobs = myGrobs, nrow = 2,ncol =2 )
## New NEF10/ROCAUC comparison for GDSC
testresult <- read.csv("GDSC8_eval_NEF10.csv", header = T)
m = dim(testresult)[1]
myGrobs <- list(p4,p3)
gridExtra::grid.arrange( grobs = myGrobs, nrow = 1,ncol =2 )
## 1st round: largest complete data matrix
setwd('~/RAwork/BOISE/BOISE_followup/FDA_analysis/')
set.seed(2)
load('fda_data_short.RData')
assay = unique(data_short$PUBCHEM_AID)
cpd = unique(data_short$PUBCHEM_CID)
dat = matrix(NA, nrow = length(assay), ncol = length(cpd))
rownames(dat) = assay
colnames(dat) = cpd
for (i in 1:nrow(data_short)) {
if(data_short$PUBCHEM_OUTCOME[i] == 'Active'){
dat[data_short$PUBCHEM_AID[i], data_short$PUBCHEM_CID[i]] = 1
} else{
dat[data_short$PUBCHEM_AID[i], data_short$PUBCHEM_CID[i]] = 0
}
}
load('fda_data_rearranged.RData')
sum(block_res$row_block[1,])
sum(block_res$col_block[1,])
