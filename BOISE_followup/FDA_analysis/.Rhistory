Scores = rep(0, ncol(train))
complete_idx = which(!is.na(test))
xA = test[inform]
nA = length(inform)
for (k in 1:col_sample_size) {
# load block RData file
if(k == 8){
next
}
load(paste('~/CHTC_Downloads/block_res_', as.character(k), '.RData', sep = ''))
# specific m0 priors
m0_selection = m0_selections[which(m0_selections$V1==k),]
## cluster assignment. Merge all column clusters with size <= 2
cl = cl_sample$CC[k,]
for (grp in 1:cl_sample$KK[k]){
if(cl_sample$NN[k, grp] <= 2)
break
}
cl[which(cl > grp)] = grp
Scores = Scores + evaluate_interm(cl, inform, train, test,
m0_selection, block, row_sample_size)
}
Scores = Scores / (col_sample_size-1)
Scores[inform[which(xA==1)]] = rep(max(Scores) + 1, sum(xA, na.rm = T))
Scores[inform[which(xA==0)]] = rep(min(Scores) - 1, sum(1-xA, na.rm = T))
return(Scores)
# test = as.vector(test[complete_idx])
# Scores = as.vector(Scores[complete_idx])
# if(measure == "nef"){
#   if(sum(test, na.rm = T) == 0){
#     print('All observed responses are 0!')
#     result = NA
#   } else{
#     nTop = round(ncol(train) * percent, 0)
#     top = order(Scores,decreasing = T)[1:nTop]
#     pred_hit = sum(test[top])
#     hit = sum(test)
#     maxhit = min(hit,nTop)
#     result = ((pred_hit/nTop - hit/ncol(train)) / (maxhit/nTop - hit/ncol(train)) + 1)/2
#   }
# } else if(measure == 'selectivity_nef'){
#   nTop = round(ncol(train) * percent, 0)
#   top = order(Scores,decreasing = T)[1:nTop]
#   selectivity_score = colMeans(train, na.rm = T)
#   test = test - selectivity_score
#   pred_hit = sum(test[top])
#   hit = sum(test)
#   maxhit = sum(sort(test, decreasing = T)[1:nTop])
#   result = ((pred_hit/nTop - hit/ncol(train)) / (maxhit/nTop - hit/ncol(train)) + 1)/2
# } else if(measure == "rocauc"){
#   if(sum(test, na.rm = T) == 0){
#     print('All observed responses are 0!')
#     result = NA
#   } else{
#     rocobj = pROC::roc(response = test, predictor = Scores, quiet = TRUE)
#     result = rocobj$auc
#   }
# } else{
#   print("Criteria is not supported.")
#   result = 0
# }
# return(result)
}
k=15
i=1
i=5
tmp_inform = inform[1:k]
complete_idx = which(!is.na(test[i,]))
valid_inform = intersect(complete_idx, tmp_inform)
Scores = Evaluate(cl_sample, tmp_inform, measure='rocauc', percent=0.1,
test=test[i,], train, nT, col_sample_size, row_sample_size, m0_selections)
Response = as.vector(test[i, complete_idx])
Scores = as.vector(Scores[complete_idx])
rocobj = pROC::roc(response = Response, predictor = Scores, quiet = TRUE)
plot(rocobj)
library(pROC)
ggroc(rocobj)
### ROC curve plots
block_rocobj = pROC::roc(response = Response, predictor = Scores, quiet = TRUE)
setwd('~/RAwork/BOISE/BOISE_followup/FDA_analysis/')
load('fda_data_rearranged.RData')
set.seed(2)
library(BOISE)
block_res$row_block = block_res$row_block[1:5,]
block_res$col_block = block_res$col_block[1:5,]
active_ind = apply(block_res$col_block, 2, sum)
active_ind = which(active_ind > 0)
cpds = colnames(block_res$col_block[, active_ind])
dat = dat[, cpds]
## Train-test separation
count = apply(dat,1, function(x){return(sum(is.na(x)))})
test_AID = names(sort(count)[1:100])
train_AID = setdiff(rownames(dat), test_AID)
train = dat[train_AID, ]
test = dat[test_AID,]
rm(dat)
m0 = 10
a = rep(mean(train, na.rm = T), ncol(train))
b = 1 - a
sample_size = 500
### load clustering results, informer selection from Condor
load('clust_res_10.RData')
inform = c(25, 195, 264, 285, 525, 189, 102, 259, 32, 205, 112, 71,103, 95, 138,141)
inform_CID = colnames(train)[inform]
nT = as.integer(ncol(train) * 0.1)
### Test set performance
## revise Evaluate function to incorporate NAs
Evaluate <-
function(cl_sample, inform, measure, percent,
test, train, nT, sample_size, alpha, beta, m0){
P = clust_sum(cl_sample,train,sample_size, alpha, beta)
Score = rep(0, ncol(train))
complete_idx = which(!is.na(test))
inform = intersect(inform, complete_idx)
xA = test[inform]
nA=length(inform)
m = ncol(train)
post_probs = matrix(0, 1, sample_size)
post_thetas = matrix(0, sample_size, m)
for (k in 1:sample_size){
postls = pel2_beta(P[[k]], x0=train, xA, A=inform, nT, alpha, beta, m0)
post_probs[k] = postls$post_prob
post_thetas[k, ] = postls$post_theta
}
post_probs = post_probs / (sum(post_probs))
Score = post_probs %*% post_thetas
Score[inform[which(xA==1)]] = rep(max(Score) + 1, sum(xA, na.rm = T))
Score[inform[which(xA==0)]] = rep(min(Score) - 1, sum(1-xA, na.rm = T))
# test = as.vector(test[complete_idx])
# Score = as.vector(Score[complete_idx])
# if(measure == "nef"){
#   if(sum(test, na.rm = T) == 0){
#     print('All observed responses are 0!')
#     result = NA
#   } else{
#     nTop = round(length(test) * percent, 0)
#     top = order(Score,decreasing = T)[1:nTop]
#     pred_hit = sum(test[top])
#     hit = sum(test)
#     maxhit = min(hit,nTop)
#     result = ((pred_hit/nTop - hit/length(test)) / (maxhit/nTop - hit/length(test)) + 1)/2
#   }
# } else if(measure == 'selectivity_nef'){
#   if(sum(test, na.rm = T) == 0){
#     print('All observed responses are 0!')
#     result = NA
#   } else{
#     nTop = round(length(test) * percent, 0)
#     top = order(Score,decreasing = T)[1:nTop]
#     selectivity_score = colMeans(train, na.rm = T)
#     selectivity_score = as.vector(selectivity_score[complete_idx])
#     test = test - selectivity_score / 10
#     pred_hit = sum(test[top])
#     hit = sum(test)
#     maxhit = sum(sort(test, decreasing = T)[1:nTop])
#     result = ((pred_hit/nTop - hit/length(test)) / (maxhit/nTop - hit/length(test)) + 1)/2
#     ### not always positive if penalize, try different lambdas as penalization!!
#   }
# } else if(measure == "rocauc"){
#   if(sum(test, na.rm = T) == 0){
#     print('All observed responses are 0!')
#     result = NA
#   } else{
#     rocobj = pROC::roc(response = test, predictor = Score, quiet = TRUE)
#     result = rocobj$auc
#   }
# } else if(measure %in% c("mat", "f")){
#   pred.obj = ROCR::prediction(Score, test)
#   perform.obj = ROCR::performance(pred.obj, measure)
#   result = max(unlist(perform.obj@y.values),na.rm = T)
# } else{
#   print("Criteria is not supported.")
#   result = 0
# }
return(Score)
}
k
i
tmp_inform = inform[1:k]
complete_idx = which(!is.na(test[i,]))
valid_inform = intersect(complete_idx, tmp_inform)
Scores = Evaluate(cl_sample, tmp_inform, measure = 'nef', percent = 0.15,
test=test[i,], train, nT, sample_size, a, b, m0)
Response = as.vector(test[i, complete_idx])
Scores = as.vector(Scores[complete_idx])
original_rocobj = pROC::roc(response = Response, predictor = Scores, quiet = TRUE)
p = ggroc(list(block = block_rocobj, original = original_rocobj))
p
p = ggroc(list(block_Boise = block_rocobj, original_Boise = original_rocobj))
p
### Plots
library(ggplot2)
results = data.frame('Informer_size' = 3:15)
nef_results = read.table('block_nef20_results.txt', sep = ' ', header=T)
results[,'Boise_block'] = apply(nef_results, 2,function(x){return(mean(x, na.rm = T))})[2:14]
nef_results = read.table('nef20_results.txt', sep = ' ', header=T)
results[,'Boise_original'] = apply(nef_results, 2,function(x){return(mean(x, na.rm = T))})[4:16]
## Baseline ROCAUC, no informers, just score with hit frequency
baseline_roc = rep(NA,100)
baseline_nef = rep(NA, 100)
for (i in 1:100){
Score = apply(train,2,function(x){return(mean(x, na.rm = T))})
complete_idx = which(!is.na(test[i,]))
tmp = as.vector(test[i,complete_idx])
Score = as.vector(Score[complete_idx])
if(sum(test[i,], na.rm = T) == 0){
print('All observed responses are 0!')
} else{
##rocauc
rocobj = pROC::roc(response = tmp, predictor = Score, quiet = TRUE)
baseline_roc[i] = rocobj$auc
##nef
nTop = round(length(tmp) * 0.15, 0)
top = order(Score,decreasing = T)[1:nTop]
pred_hit = sum(tmp[top])
hit = sum(tmp)
maxhit = min(hit,nTop)
baseline_nef[i] = ((pred_hit/nTop - hit/length(tmp)) / (maxhit/nTop - hit/length(tmp)) + 1)/2
}
}
summary(baseline_nef)
## Baseline ROCAUC, no informers, just score with hit frequency
baseline_roc = rep(NA,100)
baseline_nef = rep(NA, 100)
for (i in 1:100){
Score = apply(train,2,function(x){return(mean(x, na.rm = T))})
complete_idx = which(!is.na(test[i,]))
tmp = as.vector(test[i,complete_idx])
Score = as.vector(Score[complete_idx])
if(sum(test[i,], na.rm = T) == 0){
print('All observed responses are 0!')
} else{
##rocauc
rocobj = pROC::roc(response = tmp, predictor = Score, quiet = TRUE)
baseline_roc[i] = rocobj$auc
##nef
nTop = round(length(tmp) * 0.2, 0)
top = order(Score,decreasing = T)[1:nTop]
pred_hit = sum(tmp[top])
hit = sum(tmp)
maxhit = min(hit,nTop)
baseline_nef[i] = ((pred_hit/nTop - hit/length(tmp)) / (maxhit/nTop - hit/length(tmp)) + 1)/2
}
}
summary(baseline_nef)
results[, 'Baseline'] = rep(mean(baseline_nef, na.rm=T), 13)
legend_title_size = 13
legend_text_size = 13
axis_title_size = 16
axis_text_size = 15
View(results)
p <- ggplot(results)+
geom_point(mapping = aes(x = Informer_size, y = Boise_block))+
geom_line(mapping = aes(x = Informer_size, y = Boise_block, color = 'block_Boise'))+
geom_line(mapping = aes(x = Informer_size, y = Baseline, color = 'Baseline'))+
geom_point(mapping = aes(x = Informer_size, y = Boise_original))+
geom_line(mapping = aes(x = Informer_size, y = Boise_original, color = 'original_Boise'))+
scale_color_manual(name = "Methods", values = c("block_Boise" = "darkblue",
'original_Boise' = 'green',
"Baseline" = "red"))+
scale_x_continuous('Informer sizes', breaks = seq(3,15, by=1))+
#scale_y_continuous('ROCAUC mean', limits = c(0.82, 0.86))+
scale_y_continuous('NEF mean', limits = c(0.79, 0.83))+
#scale_y_continuous('revNEF mean', limits = c(0.66, 0.73))+
theme(axis.title = element_text(size = axis_title_size),
axis.text = element_text(size = axis_text_size),
legend.title = element_text(size = legend_title_size),
legend.text = element_text(size = legend_text_size),
legend.position = c(0.1,0.8))
p
View(original_rocobj)
View(test)
sumary(test[5,])
summary(test[5,])
summary(test['AID_129609',])
summary(test['AID_1296009',])
setwd('~/RAwork/BOISE/BOISE_followup/FDA_analysis/')
load('fda_data_rearranged.RData')
set.seed(2)
library(BOISE)
block_res$row_block = block_res$row_block[1:5,]
block_res$col_block = block_res$col_block[1:5,]
active_ind = apply(block_res$col_block, 2, sum)
active_ind = which(active_ind > 0)
cpds = colnames(block_res$col_block[, active_ind])
dat = dat[, cpds]
## Train-test separation
count = apply(dat,1, function(x){return(sum(is.na(x)))})
test_AID = names(sort(count)[1:100])
train_AID = setdiff(rownames(dat), test_AID)
train = dat[train_AID, ]
test = dat[test_AID,]
rm(dat)
m0 = 10
a = rep(mean(train, na.rm = T), ncol(train))
b = 1 - a
sample_size = 500
inform = c(25, 195, 264, 285, 525, 189, 102, 259, 32, 205, 112, 71,103, 95, 138,141)
original_res = list()
for(k in 1:15){
original_res[[k]] = c()
}
View(original_res)
original_res[[1]]
original_res = list()
for(k in 1:15){
original_res[[k]] = c()
}
original_res = list()
for(k in 1:15){
original_res[[k]] = c(1)
}
original_res = list()
for(k in 1:15){
original_res[[k]] = c(NA)
}
original_res = list()
nef_results = read.table('nef_results.txt', sep = ' ', header=T)
for(k in 1:15){
original_res[[k]] = c(NA)
}
for (k in 1:15) {
tmp_inform = inform[1:k]
for (i in 1:100) {
complete_idx = which(!is.na(test[i,]))
valid_inform = intersect(complete_idx, tmp_inform)
nA = length(valid_inform)
original_res[[nA]] = c(original_res[[nA]], nef_result[i, k])
}
}
nef_result = read.table('nef_results.txt', sep = ' ', header=T)
for(k in 1:15){
original_res[[k]] = c(NA)
}
for (k in 1:15) {
tmp_inform = inform[1:k]
for (i in 1:100) {
complete_idx = which(!is.na(test[i,]))
valid_inform = intersect(complete_idx, tmp_inform)
nA = length(valid_inform)
original_res[[nA]] = c(original_res[[nA]], nef_result[i, k])
}
}
nef_result[i,k]
nA
View(nef_result)
original_res = list()
nef_result = read.table('nef_results.txt', sep = ' ', header=T)
for(k in 1:15){
original_res[[k]] = c(NA)
}
for (k in 1:15) {
tmp_inform = inform[1:k]
for (i in 1:100) {
complete_idx = which(!is.na(test[i,]))
valid_inform = intersect(complete_idx, tmp_inform)
nA = length(valid_inform)
if(nA > 0)
original_res[[nA]] = c(original_res[[nA]], nef_result[i, k+1])
}
}
summary(original_res[[1]])
summary(original_res[[2]])
summary(original_res[[3]])
summary(original_res[[4]])
summary(original_res[[5]])
setwd('~/RAwork/BOISE/BOISE_followup/FDA_analysis/')
load('fda_data_rearranged.RData')
set.seed(2)
library(BOISE)
block_res$row_block = block_res$row_block[1:5,]
block_res$col_block = block_res$col_block[1:5,]
active_ind = apply(block_res$col_block, 2, sum)
active_ind = which(active_ind > 0)
cpds = colnames(block_res$col_block[, active_ind])
dat = dat[, cpds]
## Train-test separation
count = apply(dat,1, function(x){return(sum(is.na(x)))})
test_AID = names(sort(count)[1:100])
train_AID = setdiff(rownames(dat), test_AID)
train = dat[train_AID, ]
test = dat[test_AID,]
rm(dat)
m0 = 10
a = rep(mean(train, na.rm = T), ncol(train))
b = 1 - a
sample_size = 500
inform = c(25, 195, 264, 285, 525, 189, 102, 259, 32, 205, 112, 71,103, 95, 138,141)
nef_results = read.table('nef_results.txt', sep = ' ', header=T)
original_res = data.frame(row.names = rownames(test), colnames = 1:15)
original_res = data.frame(row.names = rownames(test), col.names = 1:15)
original_res = as.data.frame(matrix(NA, 100, 15), row.names = rownames(test), col.names = 1:15)
View(original_res)
nef_results = read.table('nef_results.txt', sep = ' ', header=T)
tgt_idx = rownames(test)
original_res = as.data.frame(matrix(NA, 100, 15), row.names = rownames(test), col.names = 1:15)
nef_results = read.table('nef_results.txt', sep = ' ', header=T)
tgt_idx = rownames(test)
for (k in 1:15) {
tmp_inform = inform[1:k]
for (i in 1:100) {
complete_idx = which(!is.na(test[i,]))
valid_inform = intersect(complete_idx, tmp_inform)
nA = length(valid_inform)
if(nA > 0)
original_res[tgt_idx[i], nA] = nef_results[i, k+1])
}
}
original_res = as.data.frame(matrix(NA, 100, 15), row.names = rownames(test), col.names = 1:15)
nef_results = read.table('nef_results.txt', sep = ' ', header=T)
tgt_idx = rownames(test)
for (k in 1:15) {
tmp_inform = inform[1:k]
for (i in 1:100) {
complete_idx = which(!is.na(test[i,]))
valid_inform = intersect(complete_idx, tmp_inform)
nA = length(valid_inform)
if(nA > 0)
original_res[tgt_idx[i], nA] = nef_results[i, k+1]
}
}
View(original_res)
summary(original_res$V1)
summary(original_res$V2)
summary(original_res$V3)
summary(original_res$V4)
summary(original_res$V5)
summary(original_res$V6)
summary(original_res$V7)
summary(original_res$V1)
summary(nef_results$nef_3)
nA_results = read.table('nA_results.txt', sep = ' ', header=T)
which(nA_results == 15)
View(original_res)
nef_results = read.table('block_nef_results.txt', sep = ' ', header=F)
block_res = as.data.frame(matrix(NA, 100, 15), row.names = rownames(test), col.names = 1:15)
View(nef_results)
block_res = as.data.frame(matrix(NA, 100, 15), row.names = rownames(test), col.names = 1:15)
nef_results = read.table('block_nef_results.txt', sep = ' ', header=T)
tgt_idx = rownames(test)
View(block_res)
View(nef_results)
original_res = as.data.frame(matrix(NA, 100, 15), row.names = rownames(test), col.names = 1:15)
nef_results = read.table('nef_results.txt', sep = ' ', header=T)
tgt_idx = rownames(test)
for (k in 1:15) {
tmp_inform = inform[1:k]
for (i in 1:100) {
complete_idx = which(!is.na(test[i,]))
valid_inform = intersect(complete_idx, tmp_inform)
nA = length(valid_inform)
if(nA > 0)
original_res[tgt_idx[i], paste('V',nA, sep = '')] = nef_results[i, k+1]
}
}
block_res = as.data.frame(matrix(NA, 100, 15), row.names = rownames(test), col.names = 1:15)
View(block_res)
View(nef_results)
block_res = as.data.frame(matrix(NA, 100, 15), row.names = rownames(test), col.names = 1:15)
nef_results = read.table('block_nef_results.txt', sep = ' ', header=T)
View(nef_results)
tgt_idx = rownames(test)
for (k in 3:15) {
tmp_inform = inform[1:k]
for (i in 1:100) {
complete_idx = which(!is.na(test[i,]))
valid_inform = intersect(complete_idx, tmp_inform)
nA = length(valid_inform)
if(nA > 0)
block_res[tgt_idx[i], paste('V',nA, sep = '')] = nef_results[i, k-1]
}
}
View(nef_results)
View(block_res)
summary(original_res$V3)
summary(block_res$V3)
summary(original_res$V4)
summary(block_res$V4)
summary(original_res$V5)
summary(block_res$V5)
summary(original_res$V10)
summary(original_res$V9)
summary(original_res$V8)
summary(block_res$V8)
original_res = as.data.frame(matrix(NA, 100, 15), row.names = rownames(test), col.names = 1:15)
nef_results = read.table('roc_results.txt', sep = ' ', header=T)
tgt_idx = rownames(test)
for (k in 1:15) {
tmp_inform = inform[1:k]
for (i in 1:100) {
complete_idx = which(!is.na(test[i,]))
valid_inform = intersect(complete_idx, tmp_inform)
nA = length(valid_inform)
if(nA > 0)
original_res[tgt_idx[i], paste('V',nA, sep = '')] = nef_results[i, k+1]
}
}
block_res = as.data.frame(matrix(NA, 100, 15), row.names = rownames(test), col.names = 1:15)
nef_results = read.table('block_roc_results.txt', sep = ' ', header=T)
tgt_idx = rownames(test)
for (k in 3:15) {
tmp_inform = inform[1:k]
for (i in 1:100) {
complete_idx = which(!is.na(test[i,]))
valid_inform = intersect(complete_idx, tmp_inform)
nA = length(valid_inform)
if(nA > 0)
block_res[tgt_idx[i], paste('V',nA, sep = '')] = nef_results[i, k-1]
}
}
summary(original_res$V8)
summary(block_res$V8)
